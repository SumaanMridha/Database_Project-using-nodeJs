/*
 Navicat Premium Data Transfer

 Source Server         : AlumNet
 Source Server Type    : Oracle
 Source Server Version : 120200
 Source Host           : 103.94.135.201:1521
 Source Schema         : skillverse

 Target Server Type    : Oracle
 Target Server Version : 120200
 File Encoding         : 65001

 Date: 25/02/2022 21:22:53
*/

CREATE OR REPLACE PROCEDURE "SKILLVERSE"."ADD_CO_CURRICULAR" (
    CC_GROUP_ID IN NUMBER,
    CC_EVENT_NAME IN VARCHAR2, 
    CC_EVENT_DATE IN VARCHAR2,
    CC_COVER_PHOTO IN  VARCHAR2, 
    CC_DESCRIPTION IN VARCHAR2, 
    CC_LATITUDE IN NUMBER,
    CC_LONGITUDE IN NUMBER,
    CC_PLATFORM IN VARCHAR2, 
    CC_FEES IN NUMBER,
    CC_AVAILABLE_FOR IN VARCHAR2, 
    RESULT OUT VARCHAR2
) IS
    CC_EVENT_ID NUMBER; 
    
BEGIN
		SELECT EVENT_SEQ.NEXTVAL INTO CC_EVENT_ID FROM DUAL;
    
    INSERT INTO EVENTS (EVENT_ID, EVENT_TYPE)
    VALUES (CC_EVENT_ID, 'co_curricular');

    INSERT INTO CO_CURRICULARS (
        EVENT_ID,
        EVENT_NAME,
        EVENT_DATE,
        COVER_PHOTO,
        DESCRIPTION,
        LATITUDE,
        LONGITUDE,
        PLATFORM,
        FEES,
        AVAILABLE_FOR,
        GROUP_ID,
        TIMESTAMP
    )
    VALUES (
        CC_EVENT_ID,
        CC_EVENT_NAME,
        CC_EVENT_DATE,
        CC_COVER_PHOTO,
        CC_DESCRIPTION,
        CC_LATITUDE,
        CC_LONGITUDE,
        CC_PLATFORM,
        CC_FEES,
        CC_AVAILABLE_FOR,
        CC_GROUP_ID,
        systimestamp
    );
    
    RESULT := 'Co-curricular event is added';
    COMMIT;
    
EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
        ROLLBACK; 
END;
/
-- 


CREATE OR REPLACE PROCEDURE ADD_REUNION (
    R_GROUP_ID IN NUMBER,
    R_EVENT_NAME IN VARCHAR2, 
    R_EVENT_DATE IN VARCHAR2,
    R_COVER_PHOTO IN VARCHAR2, 
    R_DESCRIPTION IN VARCHAR2, 
    R_LATITUDE IN NUMBER,
    R_LONGITUDE IN NUMBER,
    R_PLATFORM IN VARCHAR2, 
    R_FEES IN NUMBER,
    R_BATCH IN VARCHAR2,
    R_DEPARTMENT IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
    R_EVENT_ID NUMBER;
    
BEGIN
		SELECT EVENT_SEQ.NEXTVAL INTO R_EVENT_ID FROM DUAL;
    INSERT INTO EVENTS (EVENT_ID, EVENT_TYPE)
    VALUES (R_EVENT_ID, 'reunion');

    INSERT INTO REUNIONS (
        EVENT_ID,
        EVENT_NAME,
        EVENT_DATE,
        COVER_PHOTO,
        DESCRIPTION,
        LATITUDE,
        LONGITUDE,
        PLATFORM,
        FEES,
        BATCH,
        DEPARTMENT,
        GROUP_ID,
        TIMESTAMP
    )
    VALUES (
        R_EVENT_ID,
        R_EVENT_NAME,
        TO_DATE(R_EVENT_DATE, 'YYYY-MM-DD'),
        R_COVER_PHOTO,
        R_DESCRIPTION,
        R_LATITUDE,
        R_LONGITUDE,
        R_PLATFORM,
        R_FEES,
        R_BATCH,
        R_DEPARTMENT,
        R_GROUP_ID,
        systimestamp
    );
    
    RESULT := 'Reunion event is added';
    COMMIT;
    
EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
        ROLLBACK; 
END;
/


CREATE OR REPLACE PROCEDURE ADD_SEMINAR (
    S_GROUP_ID IN NUMBER,
    S_EVENT_NAME IN VARCHAR2,
    S_EVENT_DATE IN VARCHAR2,
    S_COVER_PHOTO IN VARCHAR2,
    S_DESCRIPTION IN VARCHAR2,
    S_LATITUDE IN NUMBER,
    S_LONGITUDE IN NUMBER,
    S_PLATFORM IN VARCHAR2,
    S_FEES IN NUMBER,
    S_TOPIC IN VARCHAR2,
    S_SPECIAL_GUESTS IN VARCHAR2,
    S_AVAILABLE_FOR IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
    S_EVENT_ID NUMBER;
BEGIN
    SELECT EVENT_SEQ.NEXTVAL INTO S_EVENT_ID FROM DUAL;

    INSERT INTO EVENTS (EVENT_ID, EVENT_TYPE)
    VALUES (S_EVENT_ID, 'seminar');

    INSERT INTO SEMINARS (
        EVENT_ID,
        EVENT_NAME,
        EVENT_DATE,
        COVER_PHOTO,
        DESCRIPTION,
        LATITUDE,
        LONGITUDE,
        PLATFORM,
        FEES,
        TOPIC,
        SPECIAL_GUESTS,
        AVAILABLE_FOR,
        GROUP_ID,
        TIMESTAMP
    )
    VALUES (
        S_EVENT_ID,
        S_EVENT_NAME,
        S_EVENT_DATE,
        S_COVER_PHOTO,
        S_DESCRIPTION,
        S_LATITUDE,
        S_LONGITUDE,
        S_PLATFORM,
        S_FEES,
        S_TOPIC,
        S_SPECIAL_GUESTS,
        S_AVAILABLE_FOR,
        S_GROUP_ID,
        SYSTIMESTAMP
    );
    
    RESULT := 'Seminar event is added';
    COMMIT;
    
EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the fields correctly';
        ROLLBACK;
END;
/



CREATE TABLE "SKILLVERSE"."ADMINPANEL" (
	COUNT_USER NUMBER,
	COUNT_BLOG NUMBER,
	COUNT_JOB NUMBER,
	COUNT_GROUP NUMBER,
	COUNT_ADMIN_GROUPS NUMBER,
	COUNT_MEMBER_GROUPS NUMBER,
  "USER_ID" NUMBER VISIBLE NOT NULL,
  "ACHIEVEMENT_NAME" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "ACHIEVEMENT_DATE" DATE VISIBLE NOT NULL,
  "ORGANIZED_BY" VARCHAR2(1000 BYTE) VISIBLE,
  "POSITION" VARCHAR2(1000 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;



-- ----------------------------
CREATE TABLE "SKILLVERSE"."ACHIEVEMENTS" (
  "ACHIEVEMENT_ID" NUMBER VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL,
  "ACHIEVEMENT_NAME" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "ACHIEVEMENT_DATE" DATE VISIBLE NOT NULL,
  "ORGANIZED_BY" VARCHAR2(1000 BYTE) VISIBLE,
  "POSITION" VARCHAR2(1000 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
DROP TABLE "skillverse"."BLOGS";
CREATE TABLE "SKILLVERSE"."BLOGS" (
  "POST_ID" NUMBER VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL,
  "TOPIC" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "TITLE" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "DESCRIPTION" CLOB VISIBLE NOT NULL,
  "TIMESTAMP" TIMESTAMP(6) VISIBLE DEFAULT systimestamp NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- -- ----------------------------
DROP TABLE "skillverse"."COMMENTS";
CREATE TABLE "SKILLVERSE"."COMMENTS" (
  "COMMENT_ID" NUMBER VISIBLE NOT NULL,
  "POST_ID" NUMBER VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL,
  "BODY" VARCHAR2(1024 BYTE) VISIBLE NOT NULL,
  "TIMESTAMP" TIMESTAMP(6) VISIBLE DEFAULT systimestamp NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
DROP TABLE REPORTS;
--REPORTSTABLE
CREATE TABLE "SKILLVERSE"."REPORTS" (
  "REPORT_ID" NUMBER VISIBLE NOT NULL,
	"POST_ID" NUMBER VISIBLE NOT NULL,
	 "USER_ID" NUMBER VISIBLE NOT NULL,
  "BODY" VARCHAR2(1024 BYTE) VISIBLE NOT NULL,
  "TIMESTAMP" TIMESTAMP(6) VISIBLE DEFAULT systimestamp NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

------------------------------

CREATE TABLE "SKILLVERSE"."CO_CURRICULARS" (
  "EVENT_ID" NUMBER VISIBLE NOT NULL,
  "EVENT_NAME" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "EVENT_DATE" DATE VISIBLE NOT NULL,
  "COVER_PHOTO" VARCHAR2(1000 BYTE) VISIBLE,
  "DESCRIPTION" CLOB VISIBLE NOT NULL,
  "LATITUDE" NUMBER VISIBLE,
  "LONGITUDE" NUMBER VISIBLE,
  "PLATFORM" VARCHAR2(1000 BYTE) VISIBLE,
  "FEES" NUMBER VISIBLE DEFAULT 0 NOT NULL,
  "AVAILABLE_FOR" VARCHAR2(1000 BYTE) VISIBLE DEFAULT 'All' NOT NULL,
  "GROUP_ID" NUMBER VISIBLE NOT NULL,
  "TIMESTAMP" TIMESTAMP(6) VISIBLE DEFAULT systimestamp NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for EDUCATION
-- ----------------------------
DROP TABLE "skillverse"."EDUCATION";
CREATE TABLE "SKILLVERSE"."EDUCATION" (
  "EDUCATION_ID" NUMBER VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL,
  "INSTITUTE" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "FIELD_OF_STUDY" VARCHAR2(1000 BYTE) VISIBLE,
  "DEGREE" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "GRADE" VARCHAR2(1000 BYTE) VISIBLE,
  "START_DATE" DATE VISIBLE NOT NULL,
  "END_DATE" DATE VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for EVENTS
-- ----------------------------
DROP TABLE "skillverse"."EVENTS";
CREATE TABLE "SKILLVERSE"."EVENTS" (
  "EVENT_ID" NUMBER VISIBLE NOT NULL,
  "EVENT_TYPE" VARCHAR2(20 BYTE) VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- ----------------------------
-- Table structure for EVENT_PARTICIPANTS
-- ----------------------------
DROP TABLE "skillverse"."EVENT_PARTICIPANTS";
CREATE TABLE "SKILLVERSE"."EVENT_PARTICIPANTS" (
  "EVENT_ID" NUMBER VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- ----------------------------
-- Table structure for FOLLOWS
-- ----------------------------
DROP TABLE "skillverse"."FOLLOWS";
CREATE TABLE "SKILLVERSE"."FOLLOWS" (
  "FOLLOWER" NUMBER VISIBLE NOT NULL,
  "FOLLOWING" NUMBER VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for GROUPS
-- ----------------------------
DROP TABLE "skillverse"."GROUPS";
CREATE TABLE "SKILLVERSE"."GROUPS" (
  "GROUP_ID" NUMBER VISIBLE NOT NULL,
  "GROUP_NAME" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "DESCRIPTION" CLOB VISIBLE,
  "DATE_OF_CREATION" DATE VISIBLE DEFAULT SYSDATE NOT NULL,
  "COVER_PHOTO" VARCHAR2(1000 BYTE) VISIBLE,
  "ADMIN_ID" NUMBER VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------

-- ----------------------------
-- Table structure for GROUP_MEMBERS
-- ----------------------------
DROP TABLE "skillverse"."GROUP_MEMBERS";
CREATE TABLE "SKILLVERSE"."GROUP_MEMBERS" (
  "GROUP_MEMBER_ID" NUMBER VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL,
  "GROUP_ID" NUMBER VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- ----------------------------
-- Table structure for GROUP_POSTS
-- ----------------------------
DROP TABLE "skillverse"."GROUP_POSTS";
CREATE TABLE "SKILLVERSE"."GROUP_POSTS" (
  "POST_ID" NUMBER VISIBLE NOT NULL,
  "TOPIC" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "GROUP_MEMBER_ID" NUMBER VISIBLE NOT NULL,
  "DESCRIPTION" CLOB VISIBLE NOT NULL,
  "TIMESTAMP" TIMESTAMP(6) VISIBLE DEFAULT SYSTIMESTAMP NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- ----------------------------
-- Table structure for INTERESTS
-- ----------------------------
DROP TABLE "skillverse"."INTERESTS";
CREATE TABLE "SKILLVERSE"."INTERESTS" (
  "INTEREST_ID" NUMBER VISIBLE NOT NULL,
  "INTEREST" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- ----------------------------
-- Table structure for JOB_APPLICATION
-- ----------------------------
DROP TABLE "skillverse"."JOB_APPLICATION";
CREATE TABLE "SKILLVERSE"."JOB_APPLICATION" (
  "POST_ID" NUMBER VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL,
  "CV" CLOB VISIBLE NOT NULL,
  "TIMESTAMP" TIMESTAMP(6) VISIBLE DEFAULT SYSTIMESTAMP NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for JOB_POSTS
-- ----------------------------
DROP TABLE "skillverse"."JOB_POSTS";
CREATE TABLE "SKILLVERSE"."JOB_POSTS" (
  "POST_ID" NUMBER VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL,
  "COMPANY_NAME" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "JOB_TYPE" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "REMOTE" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "LATITUDE" NUMBER VISIBLE,
  "LONGITUDE" NUMBER VISIBLE,
  "REQUIREMENTS" VARCHAR2(1024 BYTE) VISIBLE NOT NULL,
  "DESIGNATION" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "EXPECTED_SALARY" NUMBER VISIBLE NOT NULL,
  "VACANCY" NUMBER(15,0) VISIBLE,
  "EMAIL" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "PHONE_NO" VARCHAR2(1000 BYTE) VISIBLE,
  "TIMESTAMP" TIMESTAMP(6) VISIBLE DEFAULT systimestamp NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------

-- ----------------------------
-- Table structure for LIKES
-- ----------------------------
DROP TABLE "skillverse"."LIKES";
CREATE TABLE "SKILLVERSE"."LIKES" (
  "LIKE_ID" NUMBER VISIBLE NOT NULL,
  "POST_ID" NUMBER VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for MERCHS
-- ----------------------------
DROP TABLE "skillverse"."MERCHS";
CREATE TABLE "SKILLVERSE"."MERCHS" (
  "POST_ID" NUMBER VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL,
  "PRODUCT_NAME" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "IMAGE" VARCHAR2(1024 BYTE) VISIBLE NOT NULL,
  "PRICE" NUMBER VISIBLE NOT NULL,
  "EMAIL" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "PHONE_NO" VARCHAR2(1000 BYTE) VISIBLE,
  "DESCRIPTION" CLOB VISIBLE,
  "TIMESTAMP" TIMESTAMP(6) VISIBLE DEFAULT systimestamp NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- ----------------------------
-- Table structure for NOTIFICATION
-- ----------------------------
DROP TABLE "skillverse"."NOTIFICATION";
CREATE TABLE "SKILLVERSE"."NOTIFICATION" (
  "NOTIFICATION_ID" NUMBER VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL,
  "ENTITY_NAME" VARCHAR2(100 BYTE) VISIBLE NOT NULL,
  "ENTITY_ID" NUMBER VISIBLE NOT NULL,
  "NOTIFICATION_TEXT" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "NOTIFICATION_URL" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "SEEN" VARCHAR2(100 BYTE) VISIBLE NOT NULL,
  "TIMESTAMP" TIMESTAMP(6) VISIBLE DEFAULT SYSTIMESTAMP NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- ----------------------------
-- Table structure for PENDING_MEMBERS
-- ----------------------------
DROP TABLE "skillverse"."PENDING_MEMBERS";
CREATE TABLE "SKILLVERSE"."PENDING_MEMBERS" (
  "PENDING_MEMBER_ID" NUMBER VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL,
  "GROUP_ID" NUMBER VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- ----------------------------
-- Table structure for POSTS
-- ----------------------------
DROP TABLE "skillverse"."POSTS";
CREATE TABLE "SKILLVERSE"."POSTS" (
  "POST_ID" NUMBER VISIBLE NOT NULL,
  "POST_TYPE" VARCHAR2(50 BYTE) VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- ----------------------------
-- Table structure for PUBLICATIONS
-- ----------------------------
DROP TABLE "skillverse"."PUBLICATIONS";
CREATE TABLE "SKILLVERSE"."PUBLICATIONS" (
  "PUBLICATION_ID" NUMBER VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL,
  "TITLE" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "AUTHORS" VARCHAR2(1024 BYTE) VISIBLE NOT NULL,
  "JOURNAL" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "PUBLICATION_DATE" DATE VISIBLE NOT NULL,
  "PDF_LINK" VARCHAR2(1000 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Records of PUBLICATIONS
-- ----------------------------
INSERT INTO "SKILLVERSE"."PUBLICATIONS" VALUES ('61', '202', 'SKILLVERSE', 'FAHMIDA SULTANA, SUMON', 'RESEARCH', TO_DATE('2022-02-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS'), NULL);




SELECT * FROM USERS 
-- ----------------------------
-- Table structure for RESEARCH_INTERESTS
-- ----------------------------
DROP TABLE "SKILLVERSE"."RESEARCH_INTERESTS";
CREATE TABLE "SKILLVERSE"."RESEARCH_INTERESTS" (
  "RESEARCH_INTEREST_ID" NUMBER VISIBLE NOT NULL,
  "RESEARCH_INTEREST" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Records of RESEARCH_INTERESTS
-- ----------------------------
-- ----------------------------
-- Table structure for REUNIONS
-- ----------------------------
DROP TABLE "skillverse"."REUNIONS";
CREATE TABLE "SKILLVERSE"."REUNIONS" (
  "EVENT_ID" NUMBER VISIBLE NOT NULL,
  "EVENT_NAME" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "EVENT_DATE" DATE VISIBLE NOT NULL,
  "COVER_PHOTO" VARCHAR2(1000 BYTE) VISIBLE,
  "DESCRIPTION" CLOB VISIBLE NOT NULL,
  "LATITUDE" NUMBER VISIBLE,
  "LONGITUDE" NUMBER VISIBLE,
  "PLATFORM" VARCHAR2(1000 BYTE) VISIBLE,
  "FEES" NUMBER VISIBLE DEFAULT 0 NOT NULL,
  "BATCH" VARCHAR2(1000 BYTE) VISIBLE,
  "DEPARTMENT" VARCHAR2(1000 BYTE) VISIBLE,
  "GROUP_ID" NUMBER VISIBLE NOT NULL,
  "TIMESTAMP" TIMESTAMP(6) VISIBLE DEFAULT systimestamp NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- --------------------------

-- ----------------------------
-- Table structure for SCHEDULES
-- ----------------------------
DROP TABLE "skillverse"."SCHEDULES";
CREATE TABLE "SKILLVERSE"."SCHEDULES" (
  "SCHEDULE_ID" NUMBER VISIBLE NOT NULL,
  "EVENT_ID" NUMBER VISIBLE NOT NULL,
  "START_TIME" TIMESTAMP(6) VISIBLE NOT NULL,
  "END_TIME" TIMESTAMP(6) VISIBLE NOT NULL,
  "DESCRIPTION" VARCHAR2(1000 BYTE) VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;


-- ----------------------------
-- Table structure for SEMINARS
-- ----------------------------
DROP TABLE "skillverse"."SEMINARS";
CREATE TABLE "SKILLVERSE"."SEMINARS" (
  "EVENT_ID" NUMBER VISIBLE NOT NULL,
  "EVENT_NAME" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "EVENT_DATE" DATE VISIBLE NOT NULL,
  "COVER_PHOTO" VARCHAR2(1000 BYTE) VISIBLE,
  "DESCRIPTION" CLOB VISIBLE NOT NULL,
  "LATITUDE" NUMBER VISIBLE,
  "LONGITUDE" NUMBER VISIBLE,
  "PLATFORM" VARCHAR2(1000 BYTE) VISIBLE,
  "FEES" NUMBER VISIBLE DEFAULT 0 NOT NULL,
  "TOPIC" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "SPECIAL_GUESTS" VARCHAR2(1000 BYTE) VISIBLE,
  "AVAILABLE_FOR" VARCHAR2(1000 BYTE) VISIBLE DEFAULT 'All' NOT NULL,
  "GROUP_ID" NUMBER VISIBLE NOT NULL,
  "TIMESTAMP" TIMESTAMP(6) VISIBLE DEFAULT systimestamp NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- ----------------------------
-- Table structure for SKILLS
-- ----------------------------
DROP TABLE "skillverse"."SKILLS";
CREATE TABLE "SKILLVERSE"."SKILLS" (
  "SKILL_ID" NUMBER VISIBLE NOT NULL,
  "SKILL" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Records of SKILLS
-- ----------------------------
-- ----------------------------
-- Table structure for USERS
-- ----------------------------
DROP TABLE "skillverse"."USERS";
CREATE TABLE "SKILLVERSE"."USERS" (
  "USER_ID" NUMBER VISIBLE NOT NULL,
  "FIRST_NAME" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "LAST_NAME" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "DEPARTMENT" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "BATCH" NUMBER VISIBLE NOT NULL,
  "GENDER" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "CITY" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "STATE" VARCHAR2(1000 BYTE) VISIBLE,
  "COUNTRY" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "PHONE_NO" VARCHAR2(1000 BYTE) VISIBLE,
  "EMAIL" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "PASSWORD" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "ABOUT_ME" VARCHAR2(1000 BYTE) VISIBLE,
  "DATE_OF_BIRTH" DATE VISIBLE,
  "PROFILE_PICTURE" VARCHAR2(1000 BYTE) VISIBLE,
  "STUDENT_ID" VARCHAR2(1000 BYTE) VISIBLE,
  "HALL" VARCHAR2(1000 BYTE) VISIBLE,
  "FACEBOOK" VARCHAR2(1000 BYTE) VISIBLE,
  "TWITTER" VARCHAR2(1000 BYTE) VISIBLE,
  "LINKEDIN" VARCHAR2(1000 BYTE) VISIBLE,
  "GOOGLE_SCHOLAR" VARCHAR2(1000 BYTE) VISIBLE,
  "RESEARCH_GATE" VARCHAR2(1000 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Records of USERS
-- ----------------------------
-- Table structure for WORK_EXPERIENCE
-- ----------------------------
DROP TABLE "skillverse"."WORK_EXPERIENCE";
CREATE TABLE "SKILLVERSE"."WORK_EXPERIENCE" (
  "WORK_EXPERIENCE_ID" NUMBER VISIBLE NOT NULL,
  "USER_ID" NUMBER VISIBLE NOT NULL,
  "ORGANIZATION" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "EMPLOYMENT_TYPE" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "DESIGNATION" VARCHAR2(1000 BYTE) VISIBLE NOT NULL,
  "START_DATE" DATE VISIBLE NOT NULL,
  "END_DATE" DATE VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------






-- Function structure for ADD_ACHIEVEMENT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ADD_ACHIEVEMENT" (
    A_USER_ID IN NUMBER,
    A_ACHIEVEMENT_NAME IN VARCHAR2, 
    A_ACHIEVEMENT_DATE IN VARCHAR2,
    A_POSITION IN NUMBER,
    A_ORGANIZED_BY IN VARCHAR2,
    RESULT OUT VARCHAR2
    )
    IS A_ACHIEVEMENT_ID  NUMBER;
BEGIN
    SELECT ACHIEVEMENT_SEQ.NEXTVAL INTO A_ACHIEVEMENT_ID FROM DUAL;

    INSERT INTO ACHIEVEMENTS (
        USER_ID,
        ACHIEVEMENT_ID,
        ACHIEVEMENT_NAME,
        ACHIEVEMENT_DATE,
        POSITION,
        ORGANIZED_BY
    )
    VALUES (
        A_USER_ID,
        A_ACHIEVEMENT_ID,
        UPPER(A_ACHIEVEMENT_NAME),
        TO_DATE(A_ACHIEVEMENT_DATE, 'YYYY-MM-DD'),
        A_POSITION,
        A_ORGANIZED_BY
    );
    

    RESULT := 'Achievement is added';
    COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Achievement already exists';
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;
/
DECLARE
    V_USER_ID NUMBER := 205;  
    V_ACHIEVEMENT_NAME VARCHAR2(100) := 'Sample Achievement';
    V_ACHIEVEMENT_DATE VARCHAR2(10) := '2023-08-22';
    V_POSITION NUMBER := 1;
    V_ORGANIZED_BY VARCHAR2(100) := 'Organizer';
    V_RESULT VARCHAR2(100);

BEGIN
    ADD_ACHIEVEMENT(
        A_USER_ID => V_USER_ID,
        A_ACHIEVEMENT_NAME => V_ACHIEVEMENT_NAME,
        A_ACHIEVEMENT_DATE => V_ACHIEVEMENT_DATE,
        A_POSITION => V_POSITION,
        A_ORGANIZED_BY => V_ORGANIZED_BY,
        RESULT => V_RESULT
    );

    DBMS_OUTPUT.PUT_LINE(V_RESULT);
    
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/

-- ----------------------------
-- Function structure for ADD_BLOG
-- ----------------------------

CREATE OR REPLACE PROCEDURE "ADD_BLOG" (
    B_USER_ID IN  NUMBER, 
    B_TOPIC IN VARCHAR2, 
    B_TITLE IN VARCHAR2, 
    B_DESCRIPTION IN VARCHAR2, 
    RESULT OUT VARCHAR2
		)
		IS 
		B_POST_ID  NUMBER;
BEGIN

		SELECT POST_SEQ.NEXTVAL INTO B_POST_ID FROM DUAL;
    INSERT INTO POSTS (POST_ID, POST_TYPE)
    VALUES (B_POST_ID, 'blog');

    INSERT INTO BLOGS (POST_ID, USER_ID, TOPIC, TITLE, DESCRIPTION)
    VALUES (B_POST_ID, B_USER_ID, UPPER(B_TOPIC), B_TITLE, B_DESCRIPTION);
    
    RESULT := 'Blog is added';
		COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;
/


-- ----------------------------
-- Function structure for ADD_CO_CURRICULAR
-- ----------------------------

CREATE OR REPLACE PROCEDURE "SKILLVERSE"."ADD_CO_CURRICULAR" (
    CC_GROUP_ID IN NUMBER,
    CC_EVENT_NAME IN VARCHAR2, 
    CC_EVENT_DATE IN DATE,
    CC_COVER_PHOTO IN  VARCHAR2, 
    CC_DESCRIPTION IN VARCHAR2, 
    CC_LATITUDE IN NUMBER,
    CC_LONGITUDE IN NUMBER,
    CC_PLATFORM IN VARCHAR2, 
    CC_FEES IN NUMBER,
    CC_AVAILABLE_FOR IN VARCHAR2, 
    RESULT OUT VARCHAR2
) IS
    CC_EVENT_ID NUMBER; 
    
BEGIN
		SELECT EVENT_SEQ.NEXTVAL INTO CC_EVENT_ID FROM DUAL;
    
    INSERT INTO EVENTS (EVENT_ID, EVENT_TYPE)
    VALUES (CC_EVENT_ID, 'co_curricular');

    INSERT INTO CO_CURRICULARS (
        EVENT_ID,
        EVENT_NAME,
        EVENT_DATE,
        COVER_PHOTO,
        DESCRIPTION,
        LATITUDE,
        LONGITUDE,
        PLATFORM,
        FEES,
        AVAILABLE_FOR,
        GROUP_ID,
        TIMESTAMP
    )
    VALUES (
        CC_EVENT_ID,
        CC_EVENT_NAME,
        CC_EVENT_DATE,
        CC_COVER_PHOTO,
        CC_DESCRIPTION,
        CC_LATITUDE,
        CC_LONGITUDE,
        CC_PLATFORM,
        CC_FEES,
        CC_AVAILABLE_FOR,
        CC_GROUP_ID,
        systimestamp
    );
    
    RESULT := 'Co-curricular event is added';
    COMMIT;
    
EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
        ROLLBACK; 
END;
/

-- ----------------------------
-- Function structure for ADD_EDUCATION
-- ----------------------------

CREATE OR REPLACE PROCEDURE "SKILLVERSE"."ADD_EDUCATION" (
    E_USER_ID IN NUMBER,
    E_INSTITUTE IN VARCHAR2,
    E_FIELD_OF_STUDY IN VARCHAR2, 
    E_DEGREE IN VARCHAR2,
    E_GRADE IN VARCHAR2,
    E_START_DATE IN VARCHAR2,
    E_END_DATE IN VARCHAR2,
    RESULT OUT VARCHAR2)
		IS E_EDUCATION_ID NUMBER;
BEGIN
		SELECT EDUCATION_SEQ.NEXTVAL INTO E_EDUCATION_ID FROM DUAL;
    INSERT INTO EDUCATION (
        EDUCATION_ID,
        USER_ID,
        INSTITUTE,
        FIELD_OF_STUDY,
        DEGREE,
        GRADE,
        START_DATE,
        END_DATE
    )
    VALUES (
        E_EDUCATION_ID,
        E_USER_ID,
        UPPER(E_INSTITUTE),
        UPPER(E_FIELD_OF_STUDY),
        UPPER(E_DEGREE),
        UPPER(E_GRADE),
        TO_DATE(E_START_DATE, 'YYYY-MM-DD'),
        TO_DATE(E_END_DATE, 'YYYY-MM-DD')
    );

    RESULT := 'Education info is added';
		COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Education info already exists';
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;
/


-- ----------------------------
-- Function structure for ADD_GROUP_POST
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ADD_GROUP_POST" (
    GP_USER_ID IN NUMBER,
    GP_GROUP_ID IN NUMBER, 
    GP_TOPIC IN VARCHAR2, 
    GP_DESCRIPTION IN VARCHAR2, 
    RESULT OUT VARCHAR2
)
IS
    GP_POST_ID NUMBER;
    GP_GROUP_MEMBER_ID NUMBER;
BEGIN
    SELECT POST_SEQ.NEXTVAL INTO GP_POST_ID FROM DUAL;
    
    SELECT GROUP_MEMBER_ID INTO GP_GROUP_MEMBER_ID
    FROM GROUP_MEMBERS
    WHERE GROUP_ID = GP_GROUP_ID AND USER_ID = GP_USER_ID;
    
    INSERT INTO POSTS (POST_ID, POST_TYPE)
    VALUES (GP_POST_ID, 'group_post');
    
    INSERT INTO GROUP_POSTS (POST_ID, GROUP_MEMBER_ID, TOPIC, DESCRIPTION)
    VALUES (GP_POST_ID, GP_GROUP_MEMBER_ID, UPPER(GP_TOPIC), GP_DESCRIPTION);
    
    RESULT := 'Group post is added';
    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RESULT := 'No such group member';
    WHEN OTHERS THEN
        RESULT := 'Please fill up the fields correctly';
        ROLLBACK; 
END;
/


-- ----------------------------
-- Function structure for ADD_INTEREST
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."ADD_INTEREST" (
    I_USER_ID IN NUMBER,
    I_INTEREST IN VARCHAR2,
    RESULT OUT VARCHAR2 )
		IS 
		 I_INTEREST_ID NUMBER;
BEGIN
SELECT INTEREST_SEQ.NEXTVAL INTO I_INTEREST_ID FROM DUAL;

    INSERT INTO INTERESTS (INTEREST_ID, INTEREST, USER_ID)
    VALUES (I_INTEREST_ID, UPPER(I_INTEREST), I_USER_ID);

    RESULT := 'Interest is added';
		COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Interest already exists';
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;
/


-- ----------------------------
-- Function structure for ADD_JOB_POST
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."ADD_JOB_POST" (
    JP_USER_ID IN NUMBER,
    JP_COMPANY_NAME IN VARCHAR2,
    JP_JOB_TYPE IN VARCHAR2,
    JP_REMOTE IN VARCHAR2,
    JP_LATITUDE IN NUMBER,
    JP_LONGITUDE IN NUMBER,
    JP_REQUIREMENTS IN VARCHAR2,
    JP_DESIGNATION IN VARCHAR2, 
    JP_EXPECTED_SALARY IN NUMBER,
    JP_VACANCY IN NUMBER,
    JP_EMAIL IN VARCHAR2, 
    JP_PHONE_NO IN VARCHAR2, 
    RESULT OUT VARCHAR2
		)
		IS 
		JP_POST_ID NUMBER;
BEGIN
		SELECT POST_SEQ.NEXTVAL INTO JP_POST_ID FROM DUAL; 
    INSERT INTO POSTS (POST_ID, POST_TYPE)
    VALUES (JP_POST_ID, 'job_post');

    INSERT INTO JOB_POSTS (
        POST_ID,
        USER_ID,
        COMPANY_NAME,
        JOB_TYPE,
        REMOTE,
        LATITUDE,
        LONGITUDE,
        REQUIREMENTS,
        DESIGNATION,
        EXPECTED_SALARY,
        VACANCY,
        EMAIL,
        PHONE_NO
    )
    VALUES (
        JP_POST_ID,
        JP_USER_ID,
        UPPER(JP_COMPANY_NAME),
        JP_JOB_TYPE,
        JP_REMOTE,
        JP_LATITUDE,
        JP_LONGITUDE,
        JP_REQUIREMENTS,
        UPPER(JP_DESIGNATION),
        JP_EXPECTED_SALARY,
        JP_VACANCY,
        JP_EMAIL,
        JP_PHONE_NO
    );
    
    RESULT := 'Job post is added';

EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;
/

-- ----------------------------
-- Function structure for ADD_MERCH
-- ----------------------------
CREATE OR REPLACE PROCEDURE              "ADD_MERCH" (
    M_USER_ID IN NUMBER,
    M_PRODUCT_NAME IN VARCHAR2, 
    M_IMAGE IN VARCHAR2,
    M_PRICE IN NUMBER,
    M_EMAIL IN VARCHAR2,
    M_PHONE_NO IN VARCHAR2, 
    M_DESCRIPTION IN VARCHAR2,
    RESULT OUT VARCHAR2
		)
		IS 
		 M_POST_ID NUMBER;
BEGIN
		SELECT  POST_SEQ.NEXTVAL INTO M_POST_ID FROM DUAL;

    INSERT INTO POSTS (POST_ID, POST_TYPE)
    VALUES (M_POST_ID, 'merch');

    INSERT INTO MERCHS (
        POST_ID,
        USER_ID,
        PRODUCT_NAME,
        IMAGE,
        PRICE,
        EMAIL,
        PHONE_NO,
        DESCRIPTION
    )
    VALUES (
        M_POST_ID,
        M_USER_ID,
        UPPER(M_PRODUCT_NAME),
        M_IMAGE,
        M_PRICE,
        M_EMAIL,
        M_PHONE_NO,
        M_DESCRIPTION
    );
    
    RESULT := 'Merch is added';
		COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;
/

SELECT * FROM GROUP_MEMBERS;
-- ----------------------------
-- Function structure for ADD_PENDING_MEMBER
-- ----------------------------
CREATE OR REPLACE PROCEDURE ADD_PENDING_MEMBER (
    PM_USER_ID IN NUMBER, 
    PM_GROUP_ID IN NUMBER, 
    RESULT OUT VARCHAR2
)
IS 
    CNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO CNT
    FROM GROUP_MEMBERS
    WHERE USER_ID = PM_USER_ID AND GROUP_ID = PM_GROUP_ID;
    
    IF CNT = 0 THEN
        INSERT INTO PENDING_MEMBERS (
            PENDING_MEMBER_ID,
            USER_ID, GROUP_ID
        )
        VALUES (
            PENDING_MEMBER_SEQ.NEXTVAL,
            PM_USER_ID, PM_GROUP_ID
        );
        RESULT := 'Request successfully added';
    ELSE
        RESULT := 'Group member already exists';
    END IF;

    COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Pending member already exists';
    WHEN OTHERS THEN
        RESULT := 'An error occurred. Please fill up the fields correctly';
END;
/


-- ----------------------------
-- Function structure for ADD_PUBLICATION
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ADD_PUBLICATION" (
    P_USER_ID IN NUMBER, 
    P_TITLE IN VARCHAR2, 
    P_AUTHORS IN VARCHAR2, 
    P_JOURNAL IN VARCHAR2, 
    P_PUBLICATION_DATE IN VARCHAR2,
    P_PDF_LINK IN  VARCHAR2,
    RESULT OUT VARCHAR2)
		IS P_PUBLICATION_ID NUMBER;
BEGIN
		SELECT PUBLICATION_SEQ.NEXTVAL INTO  P_PUBLICATION_ID FROM DUAL;


    INSERT INTO PUBLICATIONS (
        PUBLICATION_ID,
        USER_ID,
        TITLE,
        AUTHORS,
        JOURNAL,
        PUBLICATION_DATE,
        PDF_LINK
    )
    VALUES (
        P_PUBLICATION_ID,
        P_USER_ID,
        UPPER(P_TITLE),
        UPPER(P_AUTHORS),
        UPPER(P_JOURNAL),
        TO_DATE(P_PUBLICATION_DATE, 'YYYY-MM-DD'),
        P_PDF_LINK
    );

    RESULT := 'Publication info is added';
		COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Publication info already exists';
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;
/

-- ----------------------------
-- Function structure for ADD_RESEARCH_INTEREST
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."ADD_RESEARCH_INTEREST" (
    
    RI_USER_ID IN NUMBER,
    RI_RESEARCH_INTEREST IN  VARCHAR2, 
    RESULT OUT VARCHAR2
		)
		IS 
		RI_RESEARCH_INTEREST_ID NUMBER;
BEGIN
SELECT RESEARCH_INTEREST_SEQ.NEXTVAL INTO RI_RESEARCH_INTEREST_ID FROM DUAL;

    INSERT INTO RESEARCH_INTERESTS (
        RESEARCH_INTEREST_ID,
        RESEARCH_INTEREST,
        USER_ID
    )
    VALUES (
        RI_RESEARCH_INTEREST_ID,
        UPPER(RI_RESEARCH_INTEREST),
        RI_USER_ID
    );

    RESULT := 'Research Interest is added';
		COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Research Interest already exists';
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;
/


-- ----------------------------
-- Function structure for ADD_REUNION
-- ----------------------------
CREATE OR REPLACE PROCEDURE ADD_REUNION (
    R_GROUP_ID IN NUMBER,
    R_EVENT_NAME IN VARCHAR2, 
    R_EVENT_DATE IN DATE,
    R_COVER_PHOTO IN VARCHAR2, 
    R_DESCRIPTION IN VARCHAR2, 
    R_LATITUDE IN NUMBER,
    R_LONGITUDE IN NUMBER,
    R_PLATFORM IN VARCHAR2, 
    R_FEES IN NUMBER,
    R_BATCH IN VARCHAR2,
    R_DEPARTMENT IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
    R_EVENT_ID NUMBER;
    
BEGIN
		SELECT EVENT_SEQ.NEXTVAL INTO R_EVENT_ID FROM DUAL;
    INSERT INTO EVENTS (EVENT_ID, EVENT_TYPE)
    VALUES (R_EVENT_ID, 'reunion');

    INSERT INTO REUNIONS (
        EVENT_ID,
        EVENT_NAME,
        EVENT_DATE,
        COVER_PHOTO,
        DESCRIPTION,
        LATITUDE,
        LONGITUDE,
        PLATFORM,
        FEES,
        BATCH,
        DEPARTMENT,
        GROUP_ID,
        TIMESTAMP
    )
    VALUES (
        R_EVENT_ID,
        R_EVENT_NAME,
        TO_DATE(R_EVENT_DATE, 'YYYY-MM-DD'),
        R_COVER_PHOTO,
        R_DESCRIPTION,
        R_LATITUDE,
        R_LONGITUDE,
        R_PLATFORM,
        R_FEES,
        R_BATCH,
        R_DEPARTMENT,
        R_GROUP_ID,
        systimestamp
    );
    
    RESULT := 'Reunion event is added';
    COMMIT;
    
EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
        ROLLBACK; 
END;
/

-- ----------------------------
-- Function structure for ADD_SEMINAR
-- ----------------------------

CREATE OR REPLACE PROCEDURE ADD_SEMINAR (
    S_GROUP_ID IN NUMBER,
    S_EVENT_NAME IN VARCHAR2,
    S_EVENT_DATE IN DATE,
    S_COVER_PHOTO IN VARCHAR2,
    S_DESCRIPTION IN VARCHAR2,
    S_LATITUDE IN NUMBER,
    S_LONGITUDE IN NUMBER,
    S_PLATFORM IN VARCHAR2,
    S_FEES IN NUMBER,
    S_TOPIC IN VARCHAR2,
    S_SPECIAL_GUESTS IN VARCHAR2,
    S_AVAILABLE_FOR IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
    S_EVENT_ID NUMBER;
BEGIN
    SELECT EVENT_SEQ.NEXTVAL INTO S_EVENT_ID FROM DUAL;

    INSERT INTO EVENTS (EVENT_ID, EVENT_TYPE)
    VALUES (S_EVENT_ID, 'seminar');

    INSERT INTO SEMINARS (
        EVENT_ID,
        EVENT_NAME,
        EVENT_DATE,
        COVER_PHOTO,
        DESCRIPTION,
        LATITUDE,
        LONGITUDE,
        PLATFORM,
        FEES,
        TOPIC,
        SPECIAL_GUESTS,
        AVAILABLE_FOR,
        GROUP_ID,
        TIMESTAMP
    )
    VALUES (
        S_EVENT_ID,
        S_EVENT_NAME,
        S_EVENT_DATE,
        S_COVER_PHOTO,
        S_DESCRIPTION,
        S_LATITUDE,
        S_LONGITUDE,
        S_PLATFORM,
        S_FEES,
        S_TOPIC,
        S_SPECIAL_GUESTS,
        S_AVAILABLE_FOR,
        S_GROUP_ID,
        SYSTIMESTAMP
    );
    
    RESULT := 'Seminar event is added';
    COMMIT;
    
EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the fields correctly';
        ROLLBACK;
END;
/

-- ----------------------------
-- Function structure for ADD_SKILL
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."ADD_SKILL"
(
    S_USER_ID IN NUMBER,
    S_SKILL IN VARCHAR2,
    RESULT OUT VARCHAR2)
		
		IS 
		S_SKILL_ID NUMBER;
BEGIN
	SELECT SKILL_SEQ.NEXTVAL INTO  S_SKILL_ID FROM DUAL;

    INSERT INTO SKILLS (
        SKILL_ID,
        SKILL,
        USER_ID
    )
    VALUES (
        S_SKILL_ID,
        UPPER(S_SKILL),
        S_USER_ID
    );

    RESULT := 'Skill is added';
		COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Skill already exists';
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
END;
/

-- ----------------------------
-- Function structure for ADD_WORK_EXPERIENCE


CREATE OR REPLACE PROCEDURE "ADD_WORK_EXPERIENCE" (
    WE_USER_ID IN NUMBER, 
    WE_ORGANIZATION IN VARCHAR2, 
    WE_EMPLOYMENT_TYPE IN VARCHAR2,  
    WE_DESIGNATION IN VARCHAR2,  
    WE_START_DATE IN VARCHAR2,  
    WE_END_DATE IN VARCHAR2,     
    RESULT OUT VARCHAR2   
)
IS
WE_WORK_EXPERIENCE_ID NUMBER;
BEGIN

		SELECT WORK_EXPERIENCE_SEQ.NEXTVAL INTO WE_WORK_EXPERIENCE_ID FROM DUAL;

    INSERT INTO WORK_EXPERIENCE (
        WORK_EXPERIENCE_ID,
        USER_ID,
        ORGANIZATION,
        EMPLOYMENT_TYPE,
        DESIGNATION,
        START_DATE,
        END_DATE
    )
    VALUES (
        WE_WORK_EXPERIENCE_ID,
        WE_USER_ID,
        UPPER(WE_ORGANIZATION),
        WE_EMPLOYMENT_TYPE,
        UPPER(WE_DESIGNATION),
        TO_DATE(WE_START_DATE, 'YYYY-MM-DD'),
        TO_DATE(WE_END_DATE, 'YYYY-MM-DD')
    );

    RESULT := 'Work experience is added';
		COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Work experience already exists';
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
				ROLLBACK;
END;/

DECLARE
    WE_USER_ID_PARAM NUMBER := 123; 
    WE_ORGANIZATION_PARAM VARCHAR2(100) := 'Example Company';
    WE_EMPLOYMENT_TYPE_PARAM VARCHAR2(50) := 'Full-Time';
    WE_DESIGNATION_PARAM VARCHAR2(100) := 'Software Engineer';
    WE_START_DATE_PARAM VARCHAR2(10) := '2023-01-15'; 
    WE_END_DATE_PARAM VARCHAR2(10) := '2023-12-31';  
    RESULT_PARAM VARCHAR2(100);
BEGIN
    "ADD_WORK_EXPERIENCE" (
        WE_USER_ID_PARAM,
        WE_ORGANIZATION_PARAM,
        WE_EMPLOYMENT_TYPE_PARAM,
        WE_DESIGNATION_PARAM,
        WE_START_DATE_PARAM,
        WE_END_DATE_PARAM,
        RESULT_PARAM
    );

    DBMS_OUTPUT.PUT_LINE('Result: ' || RESULT_PARAM);
END;
/
In this example, you need to replace the placeholders (WE_USER_ID_PARAM, WE_ORGANIZATION_PARAM, WE_START_DATE_PARAM, etc.) with actual values. The procedure is called with these parameters, and the result is displayed using the DBMS_OUTPUT.PUT_LINE procedure.






-- ----------------------------
-- Function structure for CREATE_CV
-- ----------------------------

CREATE OR REPLACE PROCEDURE CREATE_CV (
    C_USER_ID IN NUMBER,
    C_RESULT OUT CLOB
) AS
BEGIN
		SELECT FIRST_NAME || ' ' || LAST_NAME INTO U_NAME
    FROM USERS
    WHERE USER_ID = U_USER_ID;
		SELECT GENDER INTO U_GENDER
    FROM USERS
    WHERE USER_ID = U_USER_ID;

    SELECT BATCH INTO U_BATCH
    FROM USERS
    WHERE USER_ID = U_USER_ID;

    SELECT DEPARTMENT INTO U_DEPARTMENT
    FROM USERS
    WHERE USER_ID = U_USER_ID;

    SELECT USERS.CITY || ', ' || COUNTRY INTO U_ADDRESS
    FROM USERS
    WHERE USER_ID = U_USER_ID;

    SELECT EMAIL INTO U_EMAIL
    FROM USERS
    WHERE USER_ID = U_USER_ID;


    RESULT := '---PERSONAL INFO---' || CHR(10);
    RESULT := RESULT || 'Name : ' || U_NAME || CHR(10);
    RESULT := RESULT || 'Email : ' || U_EMAIL || CHR(10);
    RESULT := RESULT || 'Department : ' || U_DEPARTMENT || CHR(10);
    RESULT := RESULT || 'Batch : ' || U_BATCH || CHR(10);
    RESULT := RESULT || 'Gender : ' || U_GENDER || CHR(10);
    RESULT := RESULT || 'Address : ' || U_ADDRESS || CHR(10) || CHR(10);


    SELECT COUNT(*) INTO WORK_EXPERIENCE_COUNT
    FROM WORK_EXPERIENCE
    WHERE USER_ID = U_USER_ID;

    IF WORK_EXPERIENCE_COUNT > 0 THEN
        RESULT := RESULT || '---WORK EXPERIENCE---' || CHR(10);

        FOR WE IN (SELECT * FROM WORK_EXPERIENCE WHERE USER_ID = U_USER_ID ORDER BY START_DATE DESC FETCH FIRST 3 ROWS ONLY)
        LOOP
            RESULT := RESULT || i || '. ' || WE.DESIGNATION || ' (' || WE.EMPLOYMENT_TYPE || ')' || CHR(10);
            RESULT := RESULT || 'Organization : ' || WE.ORGANIZATION || CHR(10);
            
            IF WE.END_DATE IS NULL THEN
                RESULT := RESULT || WE.START_DATE || ' - now' || CHR(10);
            ELSE
                RESULT := RESULT || WE.START_DATE || ' - ' || WE.END_DATE || CHR(10);
            END IF;
            
            i := i + 1;
        END LOOP;

        RESULT := RESULT || CHR(10);
    END IF;


    SELECT COUNT(*) INTO EDUCATION_COUNT
    FROM EDUCATION
    WHERE USER_ID = U_USER_ID;

    IF EDUCATION_COUNT > 0 THEN
        RESULT := RESULT || '---EDUCATION---' || CHR(10);

        FOR E IN (SELECT * FROM EDUCATION WHERE USER_ID = U_USER_ID ORDER BY START_DATE DESC FETCH FIRST 3 ROWS ONLY)
        LOOP
            RESULT := RESULT || i || '. ' || E.DEGREE || CHR(10);
            RESULT := RESULT || 'Institute : ' || E.INSTITUTE || CHR(10);
            
            IF E.GRADE IS NOT NULL THEN
                RESULT := RESULT || 'Grade : ' || E.GRADE || CHR(10);
            END IF;
            
            IF E.END_DATE IS NULL THEN
                RESULT := RESULT || E.START_DATE || ' - now' || CHR(10);
            ELSE
                RESULT := RESULT || E.START_DATE || ' - ' || E.END_DATE || CHR(10);
            END IF;
            
            i := i + 1;
        END LOOP;

        RESULT := RESULT || CHR(10);
    END IF;


    SELECT COUNT(*) INTO PUBLICATION_COUNT
    FROM PUBLICATIONS
    WHERE USER_ID = U_USER_ID;

    IF PUBLICATION_COUNT > 0 THEN
        RESULT := RESULT || '---PUBLICATIONS---' || CHR(10);

        FOR P IN (SELECT * FROM PUBLICATIONS WHERE USER_ID = U_USER_ID ORDER BY PUBLICATION_DATE DESC FETCH FIRST 3 ROWS ONLY)
        LOOP
            RESULT := RESULT || i || '. ' || P.TITLE || CHR(10);
            RESULT := RESULT || 'Journal : ' || P.JOURNAL || ' (' || P.PUBLICATION_DATE || ')' || CHR(10);
            RESULT := RESULT || 'Authors : ' || P.AUTHORS || CHR(10);
            i := i + 1;
        END LOOP;

        RESULT := RESULT || CHR(10);
    END IF;


    SELECT COUNT(*) INTO ACHIEVEMENT_COUNT
    FROM ACHIEVEMENTS
    WHERE USER_ID = U_USER_ID;

    IF ACHIEVEMENT_COUNT > 0 THEN
        RESULT := RESULT || '---ACHIEVEMENTS---' || CHR(10);

        FOR A IN (SELECT * FROM ACHIEVEMENTS WHERE USER_ID = U_USER_ID ORDER BY ACHIEVEMENT_ID DESC FETCH FIRST 3 ROWS ONLY)
        LOOP
            RESULT := RESULT || i || '. ' || A.ACHIEVEMENT_NAME || ' (' || A.ACHIEVEMENT_DATE || ')' || CHR(10);
            
            IF A.POSITION IS NOT NULL THEN
                RESULT := RESULT || 'Position : ' || A.POSITION || CHR(10);
            END IF;
            
            i := i + 1;
        END LOOP;

        RESULT := RESULT || CHR(10);
    END IF;


    SELECT COUNT(*) INTO RESEARCH_INTEREST_COUNT
    FROM RESEARCH_INTERESTS
    WHERE USER_ID = U_USER_ID;

    IF RESEARCH_INTEREST_COUNT > 0 THEN
        RESULT := RESULT || '---RESEARCH INTEREST---' || CHR(10);

        FOR RI IN (SELECT * FROM RESEARCH_INTERESTS WHERE USER_ID = U_USER_ID FETCH FIRST 3 ROWS ONLY)
        LOOP
            RESULT := RESULT || i || '. ' || RI.RESEARCH_INTEREST || '   ';
            i := i + 1;
        END LOOP;

        RESULT := RESULT || CHR(10);
    END IF;


    SELECT COUNT(*) INTO SKILL_COUNT
    FROM SKILLS
    WHERE USER_ID = U_USER_ID;

    IF SKILL_COUNT > 0 THEN
        RESULT := RESULT || '---SKILL---' || CHR(10);

        FOR S IN (SELECT * FROM SKILLS WHERE USER_ID = U_USER_ID FETCH FIRST 3 ROWS ONLY)
        LOOP
            RESULT := RESULT || i || '. ' || S.SKILL || '   ';
            i := i + 1;
        END LOOP;

        RESULT := RESULT || CHR(10);
    END IF;


    SELECT COUNT(*) INTO INTEREST_COUNT
    FROM INTERESTS
    WHERE USER_ID = U_USER_ID;

    IF INTEREST_COUNT > 0 THEN
        RESULT := RESULT || '---INTEREST---' || CHR(10);

        FOR INT IN (SELECT * FROM INTERESTS WHERE USER_ID = U_USER_ID FETCH FIRST 3 ROWS ONLY)
        LOOP
            RESULT := RESULT || i || '. ' || INT.INTEREST || '   ';
            i := i + 1;
        END LOOP;

        RESULT := RESULT || CHR(10);
    END IF;

END;
/
-- 
-- 
-- ----------------------------
-- Function structure for CREATE_GROUP
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."CREATE_GROUP"(
    G_GROUP_NAME IN VARCHAR2,
    G_DESCRIPTION IN VARCHAR2,
    G_COVER_PHOTO IN VARCHAR2,
    G_ADMIN_ID IN NUMBER,
    G_RESULT OUT VARCHAR2
) IS
    G_GROUP_ID NUMBER;
    GM_GROUP_MEMBER_ID NUMBER;
BEGIN
    SELECT GROUP_SEQ.NEXTVAL INTO G_GROUP_ID FROM DUAL;

    INSERT INTO GROUPS (
					GROUP_ID,
					GROUP_NAME,
					DESCRIPTION,
					COVER_PHOTO,
					ADMIN_ID)
    VALUES (
					G_GROUP_ID,
					G_GROUP_NAME,
					G_DESCRIPTION,
					G_COVER_PHOTO,
					G_ADMIN_ID);

    SELECT GROUP_MEMBER_SEQ.NEXTVAL INTO GM_GROUP_MEMBER_ID FROM DUAL;

    INSERT INTO GROUP_MEMBERS (
					GROUP_MEMBER_ID,
					USER_ID,
					GROUP_ID)
    VALUES (
					GM_GROUP_MEMBER_ID,
					G_ADMIN_ID,
					G_GROUP_ID
					);

    G_RESULT := 'Group is successfully created';
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        G_RESULT := 'An error occurred: ' || SQLERRM;
       
END;
/

DECLARE
    v_group_name VARCHAR2(1000) := 'MyGroup';
    v_description VARCHAR2(1000):= 'This';
    v_cover_photo VARCHAR2(1000) := 'https://firebasestorage.googleapis.com/v0/b/skillversefinal.appspot.com/o/oracle_work.jpeg?alt=media&token=fec268f2-fa5c-4f73-ba04-e048f925eda9';
    v_admin_id NUMBER := 21;
    v_result VARCHAR2(1000);
BEGIN
    SKILLVERSE.CREATE_GROUP(
       v_group_name,
        v_description,
         v_cover_photo,
         v_admin_id,
         v_result
    );

    DBMS_OUTPUT.PUT_LINE(v_result);
END;
/


-- ----------------------------
-- Function structure for CREATE_USER
-- ----------------------------
CREATE OR REPLACE PROCEDURE CREATE_USER (
    U_FIRST_NAME IN VARCHAR2,
    U_LAST_NAME IN VARCHAR2,
    U_DEPARTMENT IN VARCHAR2,
    U_BATCH IN VARCHAR2,
    U_GENDER IN VARCHAR2,
    U_CITY IN VARCHAR2,
    U_STATE IN VARCHAR2,
    U_COUNTRY IN VARCHAR2,
    U_EMAIL IN VARCHAR2,
    U_PASSWORD IN VARCHAR2,
    RESULT OUT VARCHAR2
)
IS
U_USER_ID IN OUT NUMBER;
BEGIN
    SELECT USER_SEQ.NEXTVAL INTO U_USER_ID FROM DUAL;

    INSERT INTO USERS (
        USER_ID,
        FIRST_NAME,
        LAST_NAME,
        DEPARTMENT,
        BATCH,
        GENDER,
        CITY,
        STATE,
        COUNTRY,
        EMAIL,
        PASSWORD,
        PROFILE_PICTURE
    )
    VALUES (
        U_USER_ID,
        UPPER(U_FIRST_NAME),
        UPPER(U_LAST_NAME),
        U_DEPARTMENT,
        U_BATCH,
        U_GENDER,
        UPPER(U_CITY),
        UPPER(U_STATE),
        UPPER(U_COUNTRY),
        LOWER(U_EMAIL),
        U_PASSWORD,
        'https://firebasestorage.googleapis.com/v0/b/alumnet-dde22.appspot.com/o/images%2Fstatic%20images%2Fdefault-profile-icon-24.jpg?alt=media&token=3826e640-5828-4e37-b9dd-2c4608c5a409'
    );

    RESULT := 'Registration is successful';
		COMMIT;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Email already exists';
    WHEN OTHERS THEN
        RESULT := 'Please enter the fields correctly';
END;
-- ----------------------------
-- Function structure for DELETE_GROUP_MEMBER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."DELETE_GROUP_MEMBER" (
		GM_USER_ID IN NUMBER,
    GM_GROUP_ID IN NUMBER,
    RESULT OUT VARCHAR2
) AS
    G_ADMIN_ID NUMBER;
BEGIN
	
    SELECT ADMIN_ID INTO G_ADMIN_ID
    FROM GROUPS
    WHERE GROUP_ID = GM_GROUP_ID;

    IF GM_USER_ID = G_ADMIN_ID THEN
        RESULT := 'Cannot delete admin';
    ELSE

        DELETE FROM GROUP_MEMBERS
        WHERE GROUP_ID = GM_GROUP_ID AND USER_ID = GM_USER_ID;

        RESULT := 'Deleted group member';
    END IF;
		COMMIT;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RESULT := 'Group or user not found';
    WHEN OTHERS THEN
        RESULT := 'An error occurred. Please try again.';
END;
/

-- ----------------------------
-- Function structure for IS_GOING
-- ----------------------------
CREATE OR REPLACE FUNCTION              "IS_GOING" (
    EP_USER_ID NUMBER,
    EP_EVENT_ID NUMBER
) RETURN VARCHAR2 AS
    CNT NUMBER; 
    RET VARCHAR2(3); 
BEGIN
    SELECT COUNT(*) INTO CNT
    FROM EVENT_PARTICIPANTS
    WHERE USER_ID = EP_USER_ID AND EVENT_ID = EP_EVENT_ID;

    IF CNT = 0 THEN
        RET := 'NO'; 
    ELSE
        RET := 'YES';  
    END IF;

    RETURN RET;  
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'ERROR'; 
END;
/

-- ----------------------------
-- Function structure for IS_GROUP_MEMBER
-- ----------------------------
CREATE OR REPLACE FUNCTION              "IS_GROUP_MEMBER" (
    GM_USER_ID IN NUMBER,
    GM_GROUP_ID IN  NUMBER
) RETURN VARCHAR2 AS
    CNT NUMBER;
    RET VARCHAR2(3); 
BEGIN

    SELECT COUNT(*) INTO CNT
    FROM GROUP_MEMBERS
    WHERE USER_ID = GM_USER_ID AND GROUP_ID = GM_GROUP_ID;

    IF CNT = 0 THEN
        RET := 'NO';    
    ELSE
        RET := 'YES';
    END IF;

    RETURN RET;
		COMMIT; 
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'ERROR'; 
END;
/
-- ----------------------------
-- Function structure for IS_LIKED
-- ----------------------------
CREATE OR REPLACE FUNCTION              "IS_LIKED" (
    L_USER_ID IN NUMBER,
    L_POST_ID IN NUMBER
) RETURN VARCHAR2 AS
    CNT IN NUMBER;
    RET VARCHAR2(3);
BEGIN
    SELECT COUNT(*) INTO CNT
    FROM LIKES
    WHERE USER_ID = L_USER_ID AND POST_ID = L_POST_ID;

    IF CNT = 0 THEN
        RET := 'NO';
    ELSE
        RET := 'YES';
    END IF;

    RETURN RET;
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'ERROR';
END;
/






-- ----------------------------
-- Function structure for IS_NEARBY
-- ----------------------------
CREATE OR REPLACE FUNCTION "SKILLVERSE"."IS_NEARBY" (
    LATITUDE1 IN NUMBER,
    LONGITUDE1 IN NUMBER,
    LATITUDE2 IN NUMBER,
    LONGITUDE2 IN NUMBER
) RETURN VARCHAR2
IS
BEGIN
    IF LATITUDE2 is null OR LONGITUDE2 is null THEN
        RETURN 'NO';  
    ELSIF LATITUDE1 is null OR LONGITUDE1 is null THEN
        RETURN 'NO';  
    ELSIF SQRT(POWER(LATITUDE1-LATITUDE2, 2) + POWER(LONGITUDE1-LONGITUDE2, 2)) <= 0.05 THEN
        RETURN 'YES';  
    ELSE
        RETURN 'NO';  
    END IF;
END;
/


-- ----------------------------
-- Function structure for IS_PENDING_MEMBER
-- ----------------------------
CREATE OR REPLACE FUNCTION "SKILLVERSE"."IS_PENDING_MEMBER" (
    PM_USER_ID IN NUMBER,
    PM_GROUP_ID IN NUMBER
) RETURN VARCHAR2
IS
    CNT NUMBER;
    RET VARCHAR2(3);  
BEGIN
    SELECT COUNT(*) INTO CNT FROM PENDING_MEMBERS
    WHERE USER_ID = PM_USER_ID AND GROUP_ID = PM_GROUP_ID;

    IF CNT = 0 THEN
        RET := 'NO';
    ELSE
        RET := 'YES';
    END IF;

    RETURN RET;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'NO';  
    WHEN OTHERS THEN
        RETURN 'ERROR'; 
END;
/

-- ----------------------------
-- Function structure for PROCESS_PENDING_MEMBER
-- ----------------------------

CREATE OR REPLACE PROCEDURE "SKILLVERSE"."PROCESS_PENDING_MEMBER" (
    PM_USER_ID IN NUMBER,
    PM_GROUP_ID IN NUMBER,
    STATUS IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
    OKAY PENDING_MEMBERS.PENDING_MEMBER_ID  NUMBER;
BEGIN
    SELECT PENDING_MEMBER_ID INTO OKAY
    FROM PENDING_MEMBERS
    WHERE USER_ID = PM_USER_ID AND GROUP_ID = PM_GROUP_ID;

    DELETE FROM PENDING_MEMBERS
    WHERE USER_ID = PM_USER_ID AND GROUP_ID = PM_GROUP_ID;

    IF STATUS = 'accept' THEN
        BEGIN
            INSERT INTO GROUP_MEMBERS(GROUP_MEMBER_ID, USER_ID, GROUP_ID)
            VALUES (GROUP_MEMBER_SEQ.NEXTVAL, PM_USER_ID, PM_GROUP_ID);
            RESULT := 'Group Member is successfully accepted';
						COMMIT;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN
                RESULT := 'Group member already exists';
            WHEN OTHERS THEN
                RESULT := 'Error while adding group member';
        END;
    ELSIF STATUS = 'reject' THEN
        RESULT := 'Pending request is rejected';
    ELSE
        RESULT := 'Invalid status';  
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RESULT := 'No such pending request exists';
    WHEN OTHERS THEN
        RESULT := 'Please fill up the code correctly';
END;
/

-- ----------------------------
-- Function structure for UPDATE_ACHIEVEMENT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."UPDATE_ACHIEVEMENT" (
    A_ACHIEVEMENT_ID IN NUMBER,
    A_ACHIEVEMENT_NAME IN VARCHAR2,
    A_ACHIEVEMENT_DATE IN DATE,
    A_POSITION IN VARCHAR2,
    A_ORGANIZED_BY IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE achievements
    SET
        achievement_name = UPPER(A_ACHIEVEMENT_NAME),
        achievement_date = A_ACHIEVEMENT_DATE,
        position = A_POSITION,
        organized_by = A_ORGANIZED_BY
    WHERE
        achievement_id = A_ACHIEVEMENT_ID;
        
    RESULT := 'Update is successful';
		COMMIT;
    
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Achievement already exists';
    WHEN OTHERS THEN
        RESULT := 'An error occurred. Please fill up the fields correctly';
END;
/


-- ----------------------------
-- Function structure for UPDATE_BLOG
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."UPDATE_BLOG" (
    B_POST_ID IN NUMBER,
    B_TOPIC IN VARCHAR2,
    B_TITLE IN VARCHAR2,
    B_DESCRIPTION IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE BLOGS
    SET
        TOPIC = UPPER(B_TOPIC),
        TITLE = B_TITLE,
        DESCRIPTION = B_DESCRIPTION
    WHERE POST_ID = B_POST_ID;

    RESULT := 'Update is successful';
		COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'An error occurred. Please fill up the fields correctly';
END;
/


-- ----------------------------
-- Function structure for UPDATE_CO_CURRICULAR
-- ----------------------------
CREATE OR REPLACE PROCEDURE              "UPDATE_CO_CURRICULAR" (
    CC_EVENT_ID IN NUMBER,
    CC_EVENT_NAME IN VARCHAR2,
    CC_EVENT_DATE IN DATE,
    CC_COVER_PHOTO IN VARCHAR2,
    CC_DESCRIPTION IN VARCHAR2,
    CC_LATITUDE IN NUMBER,
    CC_LONGITUDE IN NUMBER,
    CC_PLATFORM IN VARCHAR2,
    CC_FEES IN NUMBER,
    CC_AVAILABLE_FOR IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE CO_CURRICULARS
    SET
        EVENT_NAME = CC_EVENT_NAME,
        EVENT_DATE = CC_EVENT_DATE,
        COVER_PHOTO = CC_COVER_PHOTO,
        DESCRIPTION = CC_DESCRIPTION,
        LATITUDE = CC_LATITUDE,
        LONGITUDE = CC_LONGITUDE,
        PLATFORM = CC_PLATFORM,
        FEES = CC_FEES,
        AVAILABLE_FOR = CC_AVAILABLE_FOR,
				TIMESTAMP=systimestamp
    WHERE EVENT_ID = CC_EVENT_ID;

    RESULT := 'Update is successful';
		COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'An error occurred. Please fill up the fields correctly';
				ROLLBACK;
END;
/

-- ----------------------------
-- Function structure for UPDATE_EDUCATION
-- ----------------------------

CREATE OR REPLACE PROCEDURE              "UPDATE_EDUCATION" (
    E_EDUCATION_ID IN NUMBER,
    E_INSTITUTE IN VARCHAR2,
    E_FIELD_OF_STUDY IN VARCHAR2,
    E_DEGREE IN VARCHAR2,
    E_GRADE IN VARCHAR2,
    E_START_DATE IN DATE,
    E_END_DATE IN DATE,
    RESULT OUT VARCHAR2
) IS 
BEGIN
    UPDATE EDUCATION
    SET
        INSTITUTE = UPPER(E_INSTITUTE),
        FIELD_OF_STUDY = E_FIELD_OF_STUDY,
        DEGREE = UPPER(E_DEGREE),
        GRADE = E_GRADE,
        START_DATE = E_START_DATE,
        END_DATE = E_END_DATE
    WHERE
        EDUCATION_ID = E_EDUCATION_ID;

    RESULT := 'Update is successful';
		COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Education info already exists';
    WHEN OTHERS THEN
        RESULT := 'An error occurred. Please fill up the fields correctly';
END;
/
-- ----------------------------
-- Function structure for UPDATE_GROUP
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."UPDATE_GROUP" (
    G_GROUP_ID IN NUMBER,
    G_GROUP_NAME IN VARCHAR2,
    G_DESCRIPTION IN VARCHAR2,
    G_COVER_PHOTO IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE GROUPS
    SET
        GROUP_NAME = G_GROUP_NAME,
        DESCRIPTION = G_DESCRIPTION,
        COVER_PHOTO = G_COVER_PHOTO
    WHERE
        GROUP_ID = G_GROUP_ID;

    RESULT := 'Update is successful';
		COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'An error occurred. Please enter the fields correctly';
				ROLLBACK;
END;
/

-- ----------------------------
-- Function structure for UPDATE_GROUP_ADMIN
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."UPDATE_GROUP_ADMIN" (
    G_GROUP_ID IN NUMBER,
    G_ADMIN_ID IN NUMBER,
    RESULT OUT VARCHAR2
) IS
    GM_USER_ID NUMBER;
BEGIN
    SELECT USER_ID INTO GM_USER_ID FROM GROUP_MEMBERS
    WHERE GROUP_ID = G_GROUP_ID AND USER_ID = G_ADMIN_ID;

    UPDATE GROUPS
    SET ADMIN_ID = G_ADMIN_ID
    WHERE GROUP_ID = G_GROUP_ID;

    RESULT := 'Update is successful';
		COMMIT;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RESULT := 'Admin must be a member of the group';
    WHEN OTHERS THEN
        RESULT := 'An error occurred. Please enter the fields correctly';
END;
/

-- ----------------------------
-- Function structure for UPDATE_GROUP_POST
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."UPDATE_GROUP_POST" (
    GP_POST_ID IN NUMBER,
    GP_TOPIC IN VARCHAR2,
    GP_DESCRIPTION IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE GROUP_POSTS
    SET
        TOPIC = UPPER(GP_TOPIC),
        DESCRIPTION = GP_DESCRIPTION
    WHERE POST_ID = GP_POST_ID;

    IF SQL%ROWCOUNT > 0 THEN
        RESULT := 'Update is successful';
    ELSE
        RESULT := 'No records were updated';
    END IF;
		COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'An error occurred: ' || SQLERRM;
END;
/

-- ----------------------------
-- Function structure for UPDATE_INTEREST
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."UPDATE_INTEREST" (
    I_INTEREST_ID IN NUMBER,
    I_INTEREST IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE INTERESTS
    SET
        INTEREST = UPPER(I_INTEREST)
    WHERE INTEREST_ID = I_INTEREST_ID;

    IF SQL%ROWCOUNT > 0 THEN
        RESULT := 'Update is successful';
    ELSE
        RESULT := 'No records were updated';
    END IF;
		COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Interest already exists';
    WHEN OTHERS THEN
        RESULT := 'An error occurred: ' || SQLERRM;
END;
/


-- ----------------------------
-- Function structure for UPDATE_JOB_POST
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."UPDATE_JOB_POST" (
    JP_POST_ID IN NUMBER,
    JP_COMPANY_NAME IN VARCHAR2,
    JP_JOB_TYPE IN VARCHAR2,
    JP_REMOTE IN VARCHAR2,
    JP_LATITUDE IN NUMBER,
    JP_LONGITUDE IN NUMBER,
    JP_REQUIREMENTS IN VARCHAR2,
    JP_DESIGNATION IN VARCHAR2,
    JP_EXPECTED_SALARY IN NUMBER,
    JP_VACANCY IN NUMBER,
    JP_EMAIL IN VARCHAR2,
    JP_PHONE_NO IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE JOB_POSTS
    SET
        COMPANY_NAME = UPPER(JP_COMPANY_NAME),
        JOB_TYPE = JP_JOB_TYPE,
        REMOTE = JP_REMOTE,
        LATITUDE = JP_LATITUDE,
        LONGITUDE = JP_LONGITUDE,
        REQUIREMENTS = JP_REQUIREMENTS,
        DESIGNATION = JP_DESIGNATION,
        EXPECTED_SALARY = JP_EXPECTED_SALARY,
        VACANCY = JP_VACANCY,
        EMAIL = JP_EMAIL,
        PHONE_NO = JP_PHONE_NO
    WHERE POST_ID = JP_POST_ID;
		
    IF SQL%ROWCOUNT > 0 THEN
        RESULT := 'Update is successful';
    ELSE
        RESULT := 'No records were updated';
        ROLLBACK;
    END IF;
		COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'An error occurred: ' || SQLERRM;
        ROLLBACK; 
END;
/


-- ----------------------------
-- Function structure for UPDATE_MERCH
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."UPDATE_MERCH" (
    M_POST_ID IN NUMBER,
    M_PRODUCT_NAME IN VARCHAR2,
    M_IMAGE IN VARCHAR2,
    M_PRICE IN NUMBER,
    M_EMAIL IN VARCHAR2,
    M_PHONE_NO IN VARCHAR2,
    M_DESCRIPTION IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE MERCHS
    SET
        PRODUCT_NAME = UPPER(M_PRODUCT_NAME),
        IMAGE = M_IMAGE,
        PRICE = M_PRICE,
        EMAIL = M_EMAIL,
        PHONE_NO = M_PHONE_NO,
        DESCRIPTION = M_DESCRIPTION
    WHERE POST_ID = M_POST_ID;
    
    IF SQL%ROWCOUNT > 0 THEN
        RESULT := 'Update is successful';
        COMMIT; 
    ELSE
        RESULT := 'No records were updated';
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'An error occurred: ' || SQLERRM;
        ROLLBACK; 
END;
/

-- ----------------------------
-- Function structure for UPDATE_PUBLICATION
-- ----------------------------
CREATE OR REPLACE PROCEDURE              "UPDATE_PUBLICATION" (
    P_PUBLICATION_ID IN NUMBER,
    P_TITLE IN VARCHAR2,
    P_AUTHORS IN VARCHAR2,
    P_JOURNAL IN VARCHAR2,
    P_PUBLICATION_DATE IN VARCHAR2,
    P_PDF_LINK IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE publications
    SET
        TITLE = UPPER(P_TITLE),
        AUTHORS = UPPER(P_AUTHORS),
        JOURNAL = UPPER(P_JOURNAL),
        PUBLICATION_DATE = TO_DATE(P_PUBLICATION_DATE, 'YYYY-MM-DD'),
        PDF_LINK = P_PDF_LINK
    WHERE
        PUBLICATION_ID = P_PUBLICATION_ID;

    IF SQL%ROWCOUNT > 0 THEN
        RESULT := 'Update is successful';
    ELSE
        RESULT := 'No records were updated';
        ROLLBACK; 
    END IF;
		COMMIT; 
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Publication info already exists';
        ROLLBACK; 
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
        ROLLBACK; 
END;
/
-- ----------------------------
-- Function structure for UPDATE_RESEARCH_INTEREST
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."UPDATE_RESEARCH_INTEREST" (
    RI_RESEARCH_INTEREST IN VARCHAR2,
		RI_RESEARCH_INTEREST_ID IN NUMBER,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE RESEARCH_INTERESTS
    SET
        RESEARCH_INTEREST = UPPER(RI_RESEARCH_INTEREST)
    WHERE RESEARCH_INTEREST_ID = RI_RESEARCH_INTEREST_ID;


    IF SQL%ROWCOUNT > 0 THEN
        RESULT := 'Update is successful';
        COMMIT; 
    ELSE
        RESULT := 'No records were updated';
        ROLLBACK; 
    END IF;
		COMMIT;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Research Interest already exists';
        ROLLBACK; 
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
        ROLLBACK; 
END;
/

-- ----------------------------
-- Function structure for UPDATE_REUNION
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."UPDATE_REUNION" (
    R_EVENT_ID IN NUMBER,
    R_EVENT_NAME IN VARCHAR2,
    R_EVENT_DATE IN VARCHAR2,
    R_COVER_PHOTO IN VARCHAR2,
    R_DESCRIPTION IN VARCHAR2,
    R_LATITUDE IN NUMBER,
    R_LONGITUDE IN NUMBER,
    R_PLATFORM IN VARCHAR2,
    R_FEES IN NUMBER,
    R_BATCH IN VARCHAR2,
    R_DEPARTMENT IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE REUNIONS
    SET
        EVENT_NAME = R_EVENT_NAME,
        EVENT_DATE = TO_DATE(R_EVENT_DATE, 'YYYY-MM-DD'),
        COVER_PHOTO = R_COVER_PHOTO,
        DESCRIPTION = R_DESCRIPTION,
        LATITUDE = R_LATITUDE,
        LONGITUDE = R_LONGITUDE,
        PLATFORM = R_PLATFORM,
        FEES = R_FEES,
        BATCH = R_BATCH,
        DEPARTMENT = R_DEPARTMENT
    WHERE EVENT_ID = R_EVENT_ID;

    IF SQL%ROWCOUNT > 0 THEN
        RESULT := 'Update is successful';
        COMMIT; 
    ELSE
        RESULT := 'No records were updated';
        ROLLBACK; 
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
        ROLLBACK; 
END;
/

-- ----------------------------
-- Function structure for UPDATE_SEMINAR
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."UPDATE_SEMINAR" (
    S_EVENT_ID IN NUMBER,
    S_EVENT_NAME IN VARCHAR2,
    S_EVENT_DATE IN VARCHAR2,
    S_COVER_PHOTO IN VARCHAR2,
    S_DESCRIPTION IN VARCHAR2,
    S_LATITUDE IN NUMBER,
    S_LONGITUDE IN NUMBER,
    S_PLATFORM IN VARCHAR2,
    S_FEES IN NUMBER,
    S_TOPIC IN VARCHAR2,
    S_SPECIAL_GUESTS IN VARCHAR2,
    S_AVAILABLE_FOR IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE SEMINARS
    SET
        EVENT_NAME = S_EVENT_NAME,
        EVENT_DATE = TO_DATE(S_EVENT_DATE, 'YYYY-MM-DD'),
        COVER_PHOTO = S_COVER_PHOTO,
        DESCRIPTION = S_DESCRIPTION,
        LATITUDE = S_LATITUDE,
        LONGITUDE = S_LONGITUDE,
        PLATFORM = S_PLATFORM,
        FEES = S_FEES,
        TOPIC = S_TOPIC,
        SPECIAL_GUESTS = S_SPECIAL_GUESTS,
        AVAILABLE_FOR = S_AVAILABLE_FOR
    WHERE EVENT_ID = S_EVENT_ID;

    IF SQL%ROWCOUNT > 0 THEN
        RESULT := 'Update is successful';
        COMMIT; 
    ELSE
        RESULT := 'No records were updated';
        ROLLBACK; 
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
        ROLLBACK; 
END;
/

-- ----------------------------
-- Function structure for UPDATE_SKILL
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SKILLVERSE"."UPDATE_SKILL" (
    S_SKILL IN VARCHAR2,
		S_SKILL_ID IN NUMBER,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE SKILLS
    SET
        SKILL = UPPER(S_SKILL)
    WHERE SKILL_ID = S_SKILL_ID;

    IF SQL%ROWCOUNT > 0 THEN
        RESULT := 'Update is successful';
        COMMIT; 
    ELSE
        RESULT := 'No records were updated';
        ROLLBACK; 
    END IF;
		COMMIT;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Skill already exists';
        ROLLBACK; 
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
        ROLLBACK; 
END;
/

-- ----------------------------
-- Function structure for UPDATE_USER
-- ----------------------------
CREATE OR REPLACE PROCEDURE              "UPDATE_USER" (
    U_USER_ID IN NUMBER,
    U_FIRST_NAME IN VARCHAR2,
    U_LAST_NAME IN VARCHAR2,
    U_CITY IN VARCHAR2,
    U_STATE IN VARCHAR2,
    U_COUNTRY IN VARCHAR2,
    U_PHONE_NO IN VARCHAR2,
    U_ABOUT_ME IN VARCHAR2,
    U_DATE_OF_BIRTH IN VARCHAR2,
    U_PROFILE_PICTURE IN VARCHAR2,
    U_STUDENT_ID IN VARCHAR2,
    U_HALL IN VARCHAR2,
    U_FACEBOOK IN VARCHAR2,
    U_TWITTER IN VARCHAR2,
    U_LINKEDIN IN VARCHAR2,
    U_GOOGLE_SCHOLAR IN VARCHAR2,
    U_RESEARCH_GATE IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE users
    SET
        FIRST_NAME = UPPER(U_FIRST_NAME),
        LAST_NAME = UPPER(U_LAST_NAME),
        CITY = UPPER(U_CITY),
        STATE = UPPER(U_STATE),
        COUNTRY = UPPER(U_COUNTRY),
        PHONE_NO = U_PHONE_NO,
        ABOUT_ME = U_ABOUT_ME,
        DATE_OF_BIRTH = TO_DATE(U_DATE_OF_BIRTH, 'YYYY-MM-DD'),
        PROFILE_PICTURE = U_PROFILE_PICTURE,
        STUDENT_ID = U_STUDENT_ID,
        HALL = UPPER(U_HALL),
        FACEBOOK = U_FACEBOOK,
        TWITTER = U_TWITTER,
        LINKEDIN = U_LINKEDIN,
        GOOGLE_SCHOLAR = U_GOOGLE_SCHOLAR,
        RESEARCH_GATE = U_RESEARCH_GATE
    WHERE USER_ID = U_USER_ID;

    IF SQL%ROWCOUNT > 0 THEN
        RESULT := 'Update is successful'; 
    ELSE
        RESULT := 'No records were updated';
        ROLLBACK; 
    END IF;
		COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RESULT := 'Please enter the fields correctly';
        ROLLBACK; 
END;
/
-- ----------------------------
-- Function structure for UPDATE_WORK_EXPERIENCE
-- ----------------------------
CREATE OR REPLACE PROCEDURE              "UPDATE_WORK_EXPERIENCE" (
    WE_WORK_EXPERIENCE_ID IN NUMBER,
    WE_ORGANIZATION IN VARCHAR2,
    WE_EMPLOYMENT_TYPE IN VARCHAR2,
    WE_DESIGNATION IN VARCHAR2,
    WE_START_DATE IN VARCHAR2,
    WE_END_DATE IN VARCHAR2,
    RESULT OUT VARCHAR2
) IS
BEGIN
    UPDATE WORK_EXPERIENCE
    SET
        ORGANIZATION = UPPER(WE_ORGANIZATION),
        EMPLOYMENT_TYPE = WE_EMPLOYMENT_TYPE,
        DESIGNATION = UPPER(WE_DESIGNATION),
        START_DATE = TO_DATE(WE_START_DATE, 'YYYY-MM-DD'),
        END_DATE = TO_DATE(WE_END_DATE, 'YYYY-MM-DD')
    WHERE
        WORK_EXPERIENCE_ID = WE_WORK_EXPERIENCE_ID;

    
    IF SQL%ROWCOUNT > 0 THEN
        RESULT := 'Update is successful'; 
    ELSE
        RESULT := 'No records were updated';
        ROLLBACK; 
    END IF;
		 COMMIT;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RESULT := 'Work experience already exists';
        ROLLBACK; 
    WHEN OTHERS THEN
        RESULT := 'Please fill up the field correctly';
        ROLLBACK; 
END;
/
-- ----------------------------
-- Sequence structure for ACHIEVEMENT_SEQ
-- ----------------------------
DROP SEQUENCE "SKILLVERSE"."ACHIEVEMENT_SEQ";
CREATE SEQUENCE "SKILLVERSE"."ACHIEVEMENT_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for COMMENT_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."COMMENT_SEQ";
CREATE SEQUENCE "SKILLVERSE"."COMMENT_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;


DROP SEQUENCE "SKILLVERSE"."REPORT_SEQ";
CREATE SEQUENCE "SKILLVERSE"."REPORT_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for EDUCATION_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."EDUCATION_SEQ";
CREATE SEQUENCE "SKILLVERSE"."EDUCATION_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for EVENT_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."EVENT_SEQ";
CREATE SEQUENCE "SKILLVERSE"."EVENT_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for GROUP_MEMBER_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."GROUP_MEMBER_SEQ";
CREATE SEQUENCE "SKILLVERSE"."GROUP_MEMBER_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for GROUP_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."GROUP_SEQ";
CREATE SEQUENCE "SKILLVERSE"."GROUP_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for INTEREST_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."INTEREST_SEQ";
CREATE SEQUENCE "SKILLVERSE"."INTEREST_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_79357
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_79357";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_79357" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_79362
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_79362";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_79362" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_79365
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_79365";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_79365" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_79388
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_79388";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_79388" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_79391
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_79391";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_79391" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_79664
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_79664";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_79664" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_79669
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_79669";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_79669" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_79672
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_79672";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_79672" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_79695
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_79695";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_79695" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_79698
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_79698";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_79698" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82201
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82201";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82201" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82205
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82205";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82205" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82209
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82209";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82209" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82213
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82213";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82213" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82227
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82227";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82227" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82232
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82232";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82232" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82235
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82235";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82235" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82258
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82258";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82258" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82261
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82261";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82261" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82286
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82286";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82286" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82318
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82318";
CREATE SEQUENCE "skillverse"."ISEQ$$_82318" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82323
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82323";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82323" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82326
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82326";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82326" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82349
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82349";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82349" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82352
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82352";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82352" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82834
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82834";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82834" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82917
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82917";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82917" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_82999
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_82999";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_82999" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_83081
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_83081";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_83081" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for ISEQ$$_84106
-- ----------------------------
DROP SEQUENCE "skillverse"."ISEQ$$_84106";
CREATE SEQUENCE "SKILLVERSE"."ISEQ$$_84106" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for LIKE_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."LIKE_SEQ";
CREATE SEQUENCE "SKILLVERSE"."LIKE_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for NOTIFICATION_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."NOTIFICATION_SEQ";
CREATE SEQUENCE "SKILLVERSE"."NOTIFICATION_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for PENDING_MEMBER_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."PENDING_MEMBER_SEQ";
CREATE SEQUENCE "SKILLVERSE"."PENDING_MEMBER_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for POST_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."POST_SEQ";
CREATE SEQUENCE "SKILLVERSE"."POST_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for PUBLICATION_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."PUBLICATION_SEQ";
CREATE SEQUENCE "SKILLVERSE"."PUBLICATION_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for RESEARCH_INTEREST_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."RESEARCH_INTEREST_SEQ";
CREATE SEQUENCE "SKILLVERSE"."RESEARCH_INTEREST_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SCHEDULE_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."SCHEDULE_SEQ";
CREATE SEQUENCE "SKILLVERSE"."SCHEDULE_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SKILL_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."SKILL_SEQ";
CREATE SEQUENCE "SKILLVERSE"."SKILL_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."USER_SEQ";
CREATE SEQUENCE "SKILLVERSE"."USER_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for WORK_EXPERIENCE_SEQ
-- ----------------------------
DROP SEQUENCE "skillverse"."WORK_EXPERIENCE_SEQ";
CREATE SEQUENCE "SKILLVERSE"."WORK_EXPERIENCE_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Primary Key structure for table ACHIEVEMENTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."ACHIEVEMENTS" ADD CONSTRAINT "ACHIEVEMENTS_PK" PRIMARY KEY ("ACHIEVEMENT_ID");

-- ----------------------------
-- Uniques structure for table ACHIEVEMENTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."ACHIEVEMENTS" ADD CONSTRAINT "ACHIEVEMENTS_UNIQUE" UNIQUE ("USER_ID", "ACHIEVEMENT_NAME", "ACHIEVEMENT_DATE") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table ACHIEVEMENTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."ACHIEVEMENTS" ADD CONSTRAINT "SYS_C0023398" CHECK ("ACHIEVEMENT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."ACHIEVEMENTS" ADD CONSTRAINT "SYS_C0023399" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."ACHIEVEMENTS" ADD CONSTRAINT "SYS_C0023400" CHECK ("ACHIEVEMENT_NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."ACHIEVEMENTS" ADD CONSTRAINT "SYS_C0023401" CHECK ("ACHIEVEMENT_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table BLOGS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."BLOGS" ADD CONSTRAINT "BLOGS_PK" PRIMARY KEY ("POST_ID");

-- ----------------------------
-- Checks structure for table BLOGS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."BLOGS" ADD CONSTRAINT "SYS_C0025332" CHECK ("POST_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."BLOGS" ADD CONSTRAINT "SYS_C0025333" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."BLOGS" ADD CONSTRAINT "SYS_C0025334" CHECK ("TOPIC" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."BLOGS" ADD CONSTRAINT "SYS_C0025335" CHECK ("TITLE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."BLOGS" ADD CONSTRAINT "SYS_C0025336" CHECK ("DESCRIPTION" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."BLOGS" ADD CONSTRAINT "SYS_C0025337" CHECK ("TIMESTAMP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table BLOGS
-- ----------------------------
CREATE TRIGGER "SKILLVERSE"."BLOG_NOTIFICATION" AFTER INSERT ON "SKILLVERSE"."BLOGS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    U_USER_NAME VARCHAR2(100);
BEGIN

    SELECT FIRST_NAME || ' ' || USERS.LAST_NAME INTO U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.USER_ID;

    FOR F IN (SELECT * FROM FOLLOWS WHERE FOLLOWING = :NEW.USER_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, F.FOLLOWER , 'POSTS', :NEW.POST_ID ,U_USER_NAME ||' has posted a blog.',
            '/api/blog/' || :NEW.POST_ID ,'NO');
    end loop;

end;
/

-- ----------------------------
-- Primary Key structure for table COMMENTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."COMMENTS" ADD CONSTRAINT "COMMENTS_PK" PRIMARY KEY ("COMMENT_ID");

-- ----------------------------
-- Checks structure for table COMMENTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."COMMENTS" ADD CONSTRAINT "SYS_C0025376" CHECK ("COMMENT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."COMMENTS" ADD CONSTRAINT "SYS_C0025377" CHECK ("POST_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."COMMENTS" ADD CONSTRAINT "SYS_C0025378" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."COMMENTS" ADD CONSTRAINT "SYS_C0025379" CHECK ("BODY" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."COMMENTS" ADD CONSTRAINT "SYS_C0025380" CHECK ("TIMESTAMP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------




ALTER TABLE "SKILLVERSE"."REPORTS" ADD CONSTRAINT "REPORTS_PK" PRIMARY KEY ("REPORT_ID");

-- ----------------------------
-- Checks structure for table COMMENTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."REPORTS" ADD CONSTRAINT "SYS_C0025576" CHECK ("REPORT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."REPORTS" ADD CONSTRAINT "SYS_C0025577" CHECK ("POST_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."REPORTS" ADD CONSTRAINT "SYS_C0025578" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."REPORTS" ADD CONSTRAINT "SYS_C0025579" CHECK ("BODY" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."REPORTS" ADD CONSTRAINT "SYS_C0025580" CHECK ("TIMESTAMP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-----------------------------------------------------------------

CREATE TRIGGER "SKILLVERSE"."REPORT_NOTIFICATION" AFTER INSERT ON "SKILLVERSE"."REPORTS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    U_USER_NAME VARCHAR2(100);
    P_USER_ID NUMBER;
    P_POST_TYPE VARCHAR2(100);
    G_GROUP_ID NUMBER;
BEGIN

    SELECT FIRST_NAME || ' ' || USERS.LAST_NAME INTO U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.USER_ID;

    SELECT POST_TYPE INTO P_POST_TYPE
    FROM POSTS
    WHERE POST_ID = :NEW.POST_ID;

    IF P_POST_TYPE = 'group_post' THEN
        SELECT GM.USER_ID INTO P_USER_ID FROM GROUP_POSTS GP
        JOIN GROUP_MEMBERS GM ON GM.GROUP_MEMBER_ID = GP.GROUP_MEMBER_ID
        WHERE GP.POST_ID = :NEW.post_id;

        SELECT GM.GROUP_ID INTO G_GROUP_ID FROM GROUP_POSTS GP
        JOIN GROUP_MEMBERS GM ON GM.GROUP_MEMBER_ID = GP.GROUP_MEMBER_ID
        WHERE GP.POST_ID = :NEW.post_id;

        IF P_USER_ID <> :NEW.USER_ID THEN
            INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
            VALUES (NOTIFICATION_SEQ.nextval, P_USER_ID , 'REPORT', :NEW.REPORT_ID , U_USER_NAME ||' has reported your post',
                '/api/' || P_POST_TYPE || '/'|| G_GROUP_ID || '/' ||:NEW.POST_ID ,'NO');
        END IF;
    ELSE
        IF P_POST_TYPE = 'blog' THEN
            SELECT B.USER_ID INTO P_USER_ID FROM BLOGS B
            WHERE B.POST_ID = :NEW.post_id;
        ELSIF P_POST_TYPE = 'job_post' THEN
            SELECT JP.USER_ID INTO P_USER_ID FROM JOB_POSTS JP
            WHERE JP.POST_ID = :NEW.post_id;
        ELSIF P_POST_TYPE = 'merch' THEN
            SELECT M.USER_ID INTO P_USER_ID FROM MERCHS M
            WHERE M.POST_ID = :NEW.post_id;
        END IF;
        IF P_USER_ID <> :NEW.USER_ID THEN
            INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
            VALUES (NOTIFICATION_SEQ.nextval, P_USER_ID , 'REPORT', :NEW.REPORT_ID , U_USER_NAME ||' has reported on your post',
                '/api/' || P_POST_TYPE || '/'|| :NEW.POST_ID ,'NO');
        END IF;
    END IF;
END;
/






-- Triggers structure for table COMMENTS
-- ----------------------------

CREATE TRIGGER "SKILLVERSE"."COMMENT_NOTIFICATION" AFTER INSERT ON "SKILLVERSE"."COMMENTS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    U_USER_NAME VARCHAR2(100);
    P_USER_ID NUMBER;
    P_POST_TYPE VARCHAR2(100);
    G_GROUP_ID NUMBER;
BEGIN

    SELECT FIRST_NAME || ' ' || USERS.LAST_NAME INTO U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.USER_ID;

    SELECT POST_TYPE INTO P_POST_TYPE
    FROM POSTS
    WHERE POST_ID = :NEW.POST_ID;

    IF P_POST_TYPE = 'group_post' THEN
        SELECT GM.USER_ID INTO P_USER_ID FROM GROUP_POSTS GP
        JOIN GROUP_MEMBERS GM ON GM.GROUP_MEMBER_ID = GP.GROUP_MEMBER_ID
        WHERE GP.POST_ID = :NEW.post_id;

        SELECT GM.GROUP_ID INTO G_GROUP_ID FROM GROUP_POSTS GP
        JOIN GROUP_MEMBERS GM ON GM.GROUP_MEMBER_ID = GP.GROUP_MEMBER_ID
        WHERE GP.POST_ID = :NEW.post_id;

        IF P_USER_ID <> :NEW.USER_ID THEN
            INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
            VALUES (NOTIFICATION_SEQ.nextval, P_USER_ID , 'COMMENTS', :NEW.COMMENT_ID , U_USER_NAME ||' has commented your post',
                '/api/' || P_POST_TYPE || '/'|| G_GROUP_ID || '/' ||:NEW.POST_ID ,'NO');
        end if;
    ELSE
        IF P_POST_TYPE = 'blog' THEN
            SELECT B.USER_ID INTO P_USER_ID FROM BLOGS B
            WHERE B.POST_ID = :NEW.post_id;
        ELSIF P_POST_TYPE = 'job_post' THEN
            SELECT JP.USER_ID INTO P_USER_ID FROM JOB_POSTS JP
            WHERE JP.POST_ID = :NEW.post_id;
        ELSIF P_POST_TYPE = 'merch' THEN
            SELECT M.USER_ID INTO P_USER_ID FROM MERCHS M
            WHERE M.POST_ID = :NEW.post_id;
        end if;
        IF P_USER_ID <> :NEW.USER_ID THEN
            INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
            VALUES (NOTIFICATION_SEQ.nextval, P_USER_ID , 'COMMENTS', :NEW.COMMENT_ID , U_USER_NAME ||' has commented on your post',
                '/api/' || P_POST_TYPE || '/'|| :NEW.POST_ID ,'NO');
        end if;
    end if;
end;
/



CREATE TRIGGER "SKILLVERSE"."COMMENT_NOTIFICATION_REMOVE" AFTER DELETE ON "SKILLVERSE"."COMMENTS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
    WHERE ENTITY_NAME = 'COMMENTS' AND ENTITY_ID = :OLD.COMMENT_ID;
end;
/

-- ----------------------------
-- Primary Key structure for table CO_CURRICULARS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."CO_CURRICULARS" ADD CONSTRAINT "CO_CURRICULARS_PK" PRIMARY KEY ("EVENT_ID");

-- ----------------------------
-- Checks structure for table CO_CURRICULARS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."CO_CURRICULARS" ADD CONSTRAINT "SYS_C0025402" CHECK ("EVENT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."CO_CURRICULARS" ADD CONSTRAINT "SYS_C0025403" CHECK ("EVENT_NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."CO_CURRICULARS" ADD CONSTRAINT "SYS_C0025404" CHECK ("EVENT_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."CO_CURRICULARS" ADD CONSTRAINT "SYS_C0025405" CHECK ("DESCRIPTION" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."CO_CURRICULARS" ADD CONSTRAINT "SYS_C0025406" CHECK ("FEES" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."CO_CURRICULARS" ADD CONSTRAINT "SYS_C0025407" CHECK ("AVAILABLE_FOR" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."CO_CURRICULARS" ADD CONSTRAINT "SYS_C0025408" CHECK ("GROUP_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."CO_CURRICULARS" ADD CONSTRAINT "SYS_C0025409" CHECK ("TIMESTAMP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."CO_CURRICULARS" ADD CONSTRAINT "SYS_C0025410" CHECK ( fees>=0 ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table CO_CURRICULARS
-- ----------------------------

CREATE TRIGGER "SKILLVERSE"."CO_CURRICULAR_NOTIFICATION" AFTER INSERT ON "SKILLVERSE"."CO_CURRICULARS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    G_GROUP_NAME VARCHAR2(1000);
BEGIN

    SELECT GROUP_NAME INTO G_GROUP_NAME
    FROM GROUPS
    WHERE GROUPS.GROUP_ID = :NEW.GROUP_ID;

    FOR GM IN (SELECT * FROM GROUP_MEMBERS WHERE GROUP_MEMBERS.GROUP_ID = :NEW.GROUP_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, GM.USER_ID , 'EVENTS', :NEW.EVENT_ID , G_GROUP_NAME ||' group is arranging a co-curricular event',
            '/api/co_curricular/' || :NEW.EVENT_ID ,'NO');
    end loop;
end;
/


CREATE TRIGGER "SKILLVERSE"."CO_CURRICULAR_UPDATE_NOTIFICATION" AFTER UPDATE ON "SKILLVERSE"."CO_CURRICULARS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
BEGIN

    FOR EP IN (SELECT * FROM EVENT_PARTICIPANTS WHERE EVENT_ID = :NEW.EVENT_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, EP.USER_ID , 'EVENT_PARTICIPANTS', :NEW.EVENT_ID , :NEW.EVENT_NAME ||' event has updated',
            '/api/co_curricular/' || :NEW.EVENT_ID ,'NO');
    end loop;
end;
/

-- ----------------------------
-- Primary Key structure for table EDUCATION
-- ----------------------------
ALTER TABLE "SKILLVERSE"."EDUCATION" ADD CONSTRAINT "EDUCATION_PK" PRIMARY KEY ("EDUCATION_ID");

-- ----------------------------
-- Uniques structure for table EDUCATION
-- ----------------------------
ALTER TABLE "SKILLVERSE"."EDUCATION" ADD CONSTRAINT "EDUCATION_UNIQUE" UNIQUE ("USER_ID", "INSTITUTE", "DEGREE", "START_DATE") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table EDUCATION
-- ----------------------------
ALTER TABLE "SKILLVERSE"."EDUCATION" ADD CONSTRAINT "EDUCATION_CHECK" CHECK ( start_date < end_date ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."EDUCATION" ADD CONSTRAINT "SYS_C0023378" CHECK ("EDUCATION_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."EDUCATION" ADD CONSTRAINT "SYS_C0023379" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."EDUCATION" ADD CONSTRAINT "SYS_C0023380" CHECK ("INSTITUTE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."EDUCATION" ADD CONSTRAINT "SYS_C0023381" CHECK ("DEGREE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."EDUCATION" ADD CONSTRAINT "SYS_C0023382" CHECK ("START_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table EVENTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."EVENTS" ADD CONSTRAINT "EVENTS_PK" PRIMARY KEY ("EVENT_ID");

-- ----------------------------
-- Checks structure for table EVENTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."EVENTS" ADD CONSTRAINT "SYS_C0025391" CHECK ("EVENT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."EVENTS" ADD CONSTRAINT "SYS_C0025392" CHECK ("EVENT_TYPE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."EVENTS" ADD CONSTRAINT "SYS_C0025393" CHECK ( event_type in ('co_curricular',
	                                                       'reunion', 'seminar') ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table EVENTS
-- ----------------------------
CREATE TRIGGER "SKILLVERSE"."EVENT_NOTIFICATION_REMOVE" AFTER DELETE ON "SKILLVERSE"."EVENTS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
    WHERE ENTITY_NAME = 'EVENTS' AND ENTITY_ID = :OLD.EVENT_ID;
end;
/

-- ----------------------------
-- Primary Key structure for table EVENT_PARTICIPANTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."EVENT_PARTICIPANTS" ADD CONSTRAINT "EVENT_PARTICIPANTS_PK" PRIMARY KEY ("EVENT_ID", "USER_ID");

-- ----------------------------
-- Checks structure for table EVENT_PARTICIPANTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."EVENT_PARTICIPANTS" ADD CONSTRAINT "SYS_C0025438" CHECK ("EVENT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."EVENT_PARTICIPANTS" ADD CONSTRAINT "SYS_C0025439" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table EVENT_PARTICIPANTS
-- ----------------------------
CREATE TRIGGER "SKILLVERSE"."EVENT_PARTICIPANT_NOTIFICATION_REMOVE" AFTER DELETE ON "SKILLVERSE"."EVENT_PARTICIPANTS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
    WHERE ENTITY_NAME = 'EVENT_PARTICIPANTS' AND ENTITY_ID = :OLD.EVENT_ID;
end;
/

-- ----------------------------
-- Primary Key structure for table FOLLOWS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."FOLLOWS" ADD CONSTRAINT "FOLLOWS_PK" PRIMARY KEY ("FOLLOWER", "FOLLOWING");

-- ----------------------------
-- Checks structure for table FOLLOWS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."FOLLOWS" ADD CONSTRAINT "FOLLOWS_CHECK" CHECK ( follower <> following ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."FOLLOWS" ADD CONSTRAINT "SYS_C0023414" CHECK ("FOLLOWER" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."FOLLOWS" ADD CONSTRAINT "SYS_C0023415" CHECK ("FOLLOWING" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table FOLLOWS
-- ----------------------------

CREATE TRIGGER "SKILLVERSE"."FOLLOW_USER_NOTIFICATION" AFTER INSERT ON "SKILLVERSE"."FOLLOWS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    U_USER_NAME VARCHAR2(100);
BEGIN
    SELECT FIRST_NAME || ' ' || LAST_NAME INTO  U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.FOLLOWER;

    INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, :NEW.FOLLOWING, 'FOLLOWS', :NEW.FOLLOWER , U_USER_NAME || ' has started to following you. Visit profile.', '/api/user/' ||:NEW.FOLLOWER,'NO');
end;
/


CREATE TRIGGER "SKILLVERSE"."FOLLOW_USER_NOTIFICATION_REMOVE" AFTER DELETE ON "SKILLVERSE"."FOLLOWS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
        WHERE ENTITY_NAME = 'FOLLOWS'
        AND ENTITY_ID = :OLD.FOLLOWER
        AND USER_ID = :OLD.FOLLOWING;
end;
/

-- ----------------------------
-- Primary Key structure for table GROUPS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."GROUPS" ADD CONSTRAINT "GROUPS_PK" PRIMARY KEY ("GROUP_ID");

-- ----------------------------
-- Checks structure for table GROUPS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."GROUPS" ADD CONSTRAINT "SYS_C0023420" CHECK ("GROUP_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."GROUPS" ADD CONSTRAINT "SYS_C0023421" CHECK ("GROUP_NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."GROUPS" ADD CONSTRAINT "SYS_C0023422" CHECK ("DATE_OF_CREATION" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."GROUPS" ADD CONSTRAINT "SYS_C0023423" CHECK ("ADMIN_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table GROUPS
-- ----------------------------

CREATE TRIGGER "SKILLVERSE"."MAKE_ADMIN_NOTIFICATION" AFTER UPDATE OF "ADMIN_ID" ON "SKILLVERSE"."GROUPS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
BEGIN

    INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, :NEW.ADMIN_ID , 'GROUPS', :NEW.ADMIN_ID ,'You are the admin of ' || :NEW.GROUP_NAME || ' group now',
            '/api/group/' || :NEW.GROUP_ID ,'NO');

end;
/

-- ----------------------------
-- Primary Key structure for table GROUP_MEMBERS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."GROUP_MEMBERS" ADD CONSTRAINT "GROUP_MEMBERS_PK" PRIMARY KEY ("GROUP_MEMBER_ID");

-- ----------------------------
-- Uniques structure for table GROUP_MEMBERS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."GROUP_MEMBERS" ADD CONSTRAINT "GROUP_MEMBERS_UNIQUE" UNIQUE ("USER_ID", "GROUP_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table GROUP_MEMBERS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."GROUP_MEMBERS" ADD CONSTRAINT "SYS_C0023426" CHECK ("GROUP_MEMBER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."GROUP_MEMBERS" ADD CONSTRAINT "SYS_C0023427" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."GROUP_MEMBERS" ADD CONSTRAINT "SYS_C0023428" CHECK ("GROUP_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table GROUP_MEMBERS
-- ----------------------------

CREATE TRIGGER "SKILLVERSE"."GROUP_MEMBER_NOTIFICATION" AFTER INSERT ON "SKILLVERSE"."GROUP_MEMBERS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    G_GROUP_NAME VARCHAR2(100);
    G_ADMIN_ID NUMBER;
BEGIN
    SELECT GROUP_NAME INTO G_GROUP_NAME
    FROM GROUPS
    WHERE GROUPS.GROUP_ID = :NEW.GROUP_ID;

    SELECT ADMIN_ID INTO G_ADMIN_ID
    FROM GROUPS
    WHERE GROUPS.GROUP_ID = :NEW.GROUP_ID;

    IF G_ADMIN_ID <> :NEW.USER_ID THEN
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
            VALUES (NOTIFICATION_SEQ.nextval, :NEW.USER_ID , 'GROUP_MEMBERS', :NEW.GROUP_MEMBER_ID ,'Your join request in ' || G_GROUP_NAME || ' group is accepted',
            '/api/group/' || :NEW.GROUP_ID ,'NO');
    end if;

end;
/


CREATE TRIGGER "SKILLVERSE"."GROUP_MEMBER_NOTIFICATION_REMOVE" AFTER DELETE ON "SKILLVERSE"."GROUP_MEMBERS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
        WHERE ENTITY_ID = :OLD.GROUP_MEMBER_ID AND ENTITY_NAME = 'GROUP_MEMBERS';
end;
/

-- ----------------------------
-- Primary Key structure for table GROUP_POSTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."GROUP_POSTS" ADD CONSTRAINT "GROUP_POSTS_PK" PRIMARY KEY ("POST_ID");

-- ----------------------------
-- Checks structure for table GROUP_POSTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."GROUP_POSTS" ADD CONSTRAINT "SYS_C0025324" CHECK ("POST_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."GROUP_POSTS" ADD CONSTRAINT "SYS_C0025325" CHECK ("TOPIC" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."GROUP_POSTS" ADD CONSTRAINT "SYS_C0025326" CHECK ("GROUP_MEMBER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."GROUP_POSTS" ADD CONSTRAINT "SYS_C0025327" CHECK ("DESCRIPTION" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."GROUP_POSTS" ADD CONSTRAINT "SYS_C0025328" CHECK ("TIMESTAMP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table GROUP_POSTS
-- ----------------------------

CREATE TRIGGER "SKILLVERSE"."GROUP_POST_NOTIFICATION" AFTER INSERT ON "SKILLVERSE"."GROUP_POSTS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    G_GROUP_NAME VARCHAR2(100);
    G_GROUP_ID NUMBER;
    G_USER_ID NUMBER;
BEGIN

    SELECT GROUP_ID INTO G_GROUP_ID
    FROM GROUP_MEMBERS GM
    WHERE GM.GROUP_MEMBER_ID = :NEW.GROUP_MEMBER_ID;

    SELECT USER_ID INTO G_USER_ID
    FROM GROUP_MEMBERS GM
    WHERE GM.GROUP_MEMBER_ID = :NEW.GROUP_MEMBER_ID;

    SELECT GROUP_NAME INTO G_GROUP_NAME
    FROM GROUPS
    WHERE GROUPS.GROUP_ID = G_GROUP_ID;

    FOR GM IN (SELECT * FROM GROUP_MEMBERS WHERE GROUP_ID = G_GROUP_ID)
    LOOP
        IF GM.USER_ID <> G_USER_ID THEN
            INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
                VALUES (NOTIFICATION_SEQ.nextval, GM.USER_ID , 'POSTS', :NEW.POST_ID ,'There is new post in ' || G_GROUP_NAME || ' group',
            '/api/group_post/' || G_GROUP_ID ||'/'|| :NEW.POST_ID ,'NO');
        end if;
    end loop;
end;
/

-- ----------------------------
-- Primary Key structure for table INTERESTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."INTERESTS" ADD CONSTRAINT "INTERESTS_PK" PRIMARY KEY ("INTEREST_ID");

-- ----------------------------
-- Uniques structure for table INTERESTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."INTERESTS" ADD CONSTRAINT "INTERESTS_UNIQUE" UNIQUE ("INTEREST", "USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table INTERESTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."INTERESTS" ADD CONSTRAINT "SYS_C0023372" CHECK ("INTEREST_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."INTERESTS" ADD CONSTRAINT "SYS_C0023373" CHECK ("INTEREST" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."INTERESTS" ADD CONSTRAINT "SYS_C0023374" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table JOB_APPLICATION
-- ----------------------------
ALTER TABLE "SKILLVERSE"."JOB_APPLICATION" ADD CONSTRAINT "JOB_APPLICATION_PK" PRIMARY KEY ("POST_ID", "USER_ID");

-- ----------------------------
-- Checks structure for table JOB_APPLICATION
-- ----------------------------
ALTER TABLE "SKILLVERSE"."JOB_APPLICATION" ADD CONSTRAINT "SYS_C0025358" CHECK ("POST_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_APPLICATION" ADD CONSTRAINT "SYS_C0025359" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_APPLICATION" ADD CONSTRAINT "SYS_C0025360" CHECK ("CV" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_APPLICATION" ADD CONSTRAINT "SYS_C0025361" CHECK ("TIMESTAMP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table JOB_APPLICATION
-- ----------------------------
CREATE TRIGGER "SKILLVERSE"."JOB_APPLICATION_NOTIFICATION" AFTER INSERT ON "SKILLVERSE"."JOB_APPLICATION" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    U_USER_NAME VARCHAR2(100);
    P_USER_ID NUMBER;
BEGIN

    SELECT FIRST_NAME || ' ' || USERS.LAST_NAME INTO U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.USER_ID;

    SELECT USER_ID INTO P_USER_ID
    FROM JOB_POSTS
    WHERE POST_ID = :NEW.POST_ID;

    INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, P_USER_ID , 'POSTS', :NEW.POST_ID ,U_USER_NAME ||' has applied for a job you posted. See the CV.',
            '/api/job_post/CV/' || :NEW.POST_ID ,'NO');

end;
/

-- ----------------------------
-- Primary Key structure for table JOB_POSTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "JOB_POSTS_PK" PRIMARY KEY ("POST_ID");

-- ----------------------------
-- Checks structure for table JOB_POSTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "SYS_C0025341" CHECK ("POST_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "SYS_C0025342" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "SYS_C0025343" CHECK ("COMPANY_NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "SYS_C0025344" CHECK ("JOB_TYPE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "SYS_C0025345" CHECK ("REMOTE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "SYS_C0025346" CHECK ("REQUIREMENTS" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "SYS_C0025347" CHECK ("DESIGNATION" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "SYS_C0025348" CHECK ("EXPECTED_SALARY" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "SYS_C0025349" CHECK ("EMAIL" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "SYS_C0025350" CHECK ("TIMESTAMP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "SYS_C0025351" CHECK ( job_type in ('Part-Time', 'Full-Time',
                                                        'Self-Employed','Internship',
                                                       'Freelance', 'Contract', 'Seasonal') ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "SYS_C0025352" CHECK ( remote in ('Yes','No') ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "SYS_C0025353" CHECK (expected_salary>=0 ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "SYS_C0025354" CHECK (vacancy is null or vacancy >0 ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table JOB_POSTS
-- ----------------------------


CREATE TRIGGER "SKILLVERSE"."JOB_POST_NOTIFICATION" AFTER INSERT ON "SKILLVERSE"."JOB_POSTS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    U_USER_NAME VARCHAR2(100);
BEGIN

    SELECT FIRST_NAME || ' ' || USERS.LAST_NAME INTO U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.USER_ID;

    FOR F IN (SELECT * FROM FOLLOWS WHERE FOLLOWING = :NEW.USER_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, F.FOLLOWER , 'POSTS', :NEW.POST_ID ,U_USER_NAME ||' has posted a job post.',
            '/api/job_post/' || :NEW.POST_ID ,'NO');
    end loop;
end;
/

-- ----------------------------
-- Primary Key structure for table LIKES
-- ----------------------------
ALTER TABLE "SKILLVERSE"."LIKES" ADD CONSTRAINT "LIKES_PK" PRIMARY KEY ("LIKE_ID");

-- ----------------------------
-- Uniques structure for table LIKES
-- ----------------------------
ALTER TABLE "SKILLVERSE"."LIKES" ADD CONSTRAINT "LIKES_UNIQUE" UNIQUE ("USER_ID", "POST_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table LIKES
-- ----------------------------
ALTER TABLE "SKILLVERSE"."LIKES" ADD CONSTRAINT "SYS_C0025384" CHECK ("LIKE_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."LIKES" ADD CONSTRAINT "SYS_C0025385" CHECK ("POST_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."LIKES" ADD CONSTRAINT "SYS_C0025386" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table LIKES
-- ----------------------------

CREATE TRIGGER "SKILLVERSE"."LIKE_NOTIFICATION" AFTER INSERT ON "SKILLVERSE"."LIKES" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    U_USER_NAME VARCHAR2(100);
    P_USER_ID NUMBER;
    P_POST_TYPE VARCHAR2(100);
    G_GROUP_ID NUMBER;
BEGIN

    SELECT FIRST_NAME || ' ' || USERS.LAST_NAME INTO U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.USER_ID;

    SELECT POST_TYPE INTO P_POST_TYPE
    FROM POSTS
    WHERE POST_ID = :NEW.POST_ID;

    IF P_POST_TYPE = 'group_post' THEN
        SELECT GM.USER_ID INTO P_USER_ID FROM GROUP_POSTS GP
        JOIN GROUP_MEMBERS GM ON GM.GROUP_MEMBER_ID = GP.GROUP_MEMBER_ID
        WHERE GP.POST_ID = :NEW.post_id;

        SELECT GM.GROUP_ID INTO G_GROUP_ID FROM GROUP_POSTS GP
        JOIN GROUP_MEMBERS GM ON GM.GROUP_MEMBER_ID = GP.GROUP_MEMBER_ID
        WHERE GP.POST_ID = :NEW.post_id;

        IF P_USER_ID <> :NEW.USER_ID THEN
            INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
            VALUES (NOTIFICATION_SEQ.nextval, P_USER_ID , 'LIKES', :NEW.LIKE_ID , U_USER_NAME ||' has liked your post',
                '/api/' || P_POST_TYPE || '/'|| G_GROUP_ID || '/' ||:NEW.POST_ID ,'NO');
        end if;
    ELSE
        IF P_POST_TYPE = 'blog' THEN
            SELECT B.USER_ID INTO P_USER_ID FROM BLOGS B
            WHERE B.POST_ID = :NEW.post_id;
        ELSIF P_POST_TYPE = 'job_post' THEN
            SELECT JP.USER_ID INTO P_USER_ID FROM JOB_POSTS JP
            WHERE JP.POST_ID = :NEW.post_id;
        ELSIF P_POST_TYPE = 'merch' THEN
            SELECT M.USER_ID INTO P_USER_ID FROM MERCHS M
            WHERE M.POST_ID = :NEW.post_id;
        end if;
        IF P_USER_ID <> :NEW.USER_ID THEN
            INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
            VALUES (NOTIFICATION_SEQ.nextval, P_USER_ID , 'LIKES', :NEW.LIKE_ID , U_USER_NAME ||' has liked your post',
                '/api/' || P_POST_TYPE || '/'|| :NEW.POST_ID ,'NO');
        end if;
    end if;
end;
/


CREATE TRIGGER "SKILLVERSE"."LIKE_NOTIFICATION_REMOVE" AFTER DELETE ON "SKILLVERSE"."LIKES" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
    WHERE ENTITY_NAME = 'LIKES' AND ENTITY_ID = :OLD.LIKE_ID;
end;
/

-- ----------------------------
-- Primary Key structure for table MERCHS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."MERCHS" ADD CONSTRAINT "MERCHS_PK" PRIMARY KEY ("POST_ID");

-- ----------------------------
-- Checks structure for table MERCHS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."MERCHS" ADD CONSTRAINT "SYS_C0025365" CHECK ("POST_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."MERCHS" ADD CONSTRAINT "SYS_C0025366" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."MERCHS" ADD CONSTRAINT "SYS_C0025367" CHECK ("PRODUCT_NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."MERCHS" ADD CONSTRAINT "SYS_C0025368" CHECK ("IMAGE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."MERCHS" ADD CONSTRAINT "SYS_C0025369" CHECK ("PRICE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."MERCHS" ADD CONSTRAINT "SYS_C0025370" CHECK ("EMAIL" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."MERCHS" ADD CONSTRAINT "SYS_C0025371" CHECK ("TIMESTAMP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."MERCHS" ADD CONSTRAINT "SYS_C0025372" CHECK ( price>=0 ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table MERCHS
-- ----------------------------

CREATE TRIGGER "SKILLVERSE"."MERCH_NOTIFICATION" AFTER INSERT ON "SKILLVERSE"."MERCHS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    U_USER_NAME VARCHAR2(100);
BEGIN

    SELECT FIRST_NAME || ' ' || USERS.LAST_NAME INTO U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.USER_ID;

    FOR F IN (SELECT * FROM FOLLOWS WHERE FOLLOWING = :NEW.USER_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, F.FOLLOWER , 'POSTS', :NEW.POST_ID ,U_USER_NAME ||' has posted a merchandise.',
            '/api/merch/' || :NEW.POST_ID ,'NO');
    end loop;
end;
/

-- ----------------------------
-- Primary Key structure for table NOTIFICATION
-- ----------------------------
ALTER TABLE "SKILLVERSE"."NOTIFICATION" ADD CONSTRAINT "NOTIFICATION_PK" PRIMARY KEY ("NOTIFICATION_ID");

-- ----------------------------
-- Checks structure for table NOTIFICATION
-- ----------------------------
ALTER TABLE "SKILLVERSE"."NOTIFICATION" ADD CONSTRAINT "ENTITY_NAME" CHECK ( entity_name in ('USERS', 'FOLLOWS', 'PENDING_MEMBERS', 'GROUP_MEMBERS', 'GROUPS',
	                                               'POSTS', 'LIKES', 'COMMENTS','EVENTS', 'EVENT_PARTICIPANTS') ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."NOTIFICATION" ADD CONSTRAINT "SYS_C0025482" CHECK ("NOTIFICATION_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."NOTIFICATION" ADD CONSTRAINT "SYS_C0025483" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."NOTIFICATION" ADD CONSTRAINT "SYS_C0025484" CHECK ("ENTITY_NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."NOTIFICATION" ADD CONSTRAINT "SYS_C0025485" CHECK ("ENTITY_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."NOTIFICATION" ADD CONSTRAINT "SYS_C0025486" CHECK ("NOTIFICATION_TEXT" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."NOTIFICATION" ADD CONSTRAINT "SYS_C0025487" CHECK ("NOTIFICATION_URL" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."NOTIFICATION" ADD CONSTRAINT "SYS_C0025488" CHECK ("SEEN" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."NOTIFICATION" ADD CONSTRAINT "SYS_C0025489" CHECK ("TIMESTAMP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."NOTIFICATION" ADD CONSTRAINT "SYS_C0025490" CHECK ( seen in ('YES', 'NO') ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PENDING_MEMBERS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."PENDING_MEMBERS" ADD CONSTRAINT "PENDING_MEMBERS_PK" PRIMARY KEY ("PENDING_MEMBER_ID");

-- ----------------------------
-- Uniques structure for table PENDING_MEMBERS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."PENDING_MEMBERS" ADD CONSTRAINT "PENDING_MEMBERS_UNIQUE" UNIQUE ("USER_ID", "GROUP_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table PENDING_MEMBERS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."PENDING_MEMBERS" ADD CONSTRAINT "SYS_C0023433" CHECK ("PENDING_MEMBER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."PENDING_MEMBERS" ADD CONSTRAINT "SYS_C0023434" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."PENDING_MEMBERS" ADD CONSTRAINT "SYS_C0023435" CHECK ("GROUP_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table PENDING_MEMBERS
-- ----------------------------

CREATE TRIGGER "SKILLVERSE"."PENDING_MEMBER_NOTIFICATION" AFTER INSERT ON "SKILLVERSE"."PENDING_MEMBERS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    U_USER_NAME VARCHAR2(100);
    G_GROUP_NAME VARCHAR2(100);
    G_ADMIN_ID NUMBER;
BEGIN
    SELECT FIRST_NAME || ' ' || LAST_NAME INTO  U_USER_NAME
    FROM USERS
    WHERE USER_ID = :NEW.USER_ID;

    SELECT GROUP_NAME INTO G_GROUP_NAME
    FROM GROUPS
    WHERE GROUPS.GROUP_ID = :NEW.GROUP_ID;

    SELECT ADMIN_ID INTO G_ADMIN_ID
    FROM GROUPS
    WHERE GROUPS.GROUP_ID = :NEW.GROUP_ID;

    INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, G_ADMIN_ID , 'PENDING_MEMBERS', :NEW.PENDING_MEMBER_ID , U_USER_NAME || ' wants to join ' || G_GROUP_NAME, '/api/group/' || :NEW.GROUP_ID ,'NO');
end;
/



CREATE TRIGGER "SKILLVERSE"."PENDING_MEMBER_NOTIFICATION_REMOVE" AFTER DELETE ON "SKILLVERSE"."PENDING_MEMBERS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
        WHERE ENTITY_ID = :OLD.PENDING_MEMBER_ID AND ENTITY_NAME = 'PENDING_MEMBERS';
end;
/

-- ----------------------------
-- Primary Key structure for table POSTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."POSTS" ADD CONSTRAINT "POSTS_PK" PRIMARY KEY ("POST_ID");

-- ----------------------------
-- Checks structure for table POSTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."POSTS" ADD CONSTRAINT "SYS_C0025320" CHECK ("POST_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."POSTS" ADD CONSTRAINT "SYS_C0025321" CHECK ("POST_TYPE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."POSTS" ADD CONSTRAINT "SYS_C0025322" CHECK ( post_type in ('group_post', 'blog','job_post','merch') ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table POSTS
-- ----------------------------

CREATE TRIGGER "SKILLVERSE"."POST_NOTIFICATION_REMOVE" AFTER DELETE ON "SKILLVERSE"."POSTS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
BEGIN
    DELETE FROM NOTIFICATION
    WHERE ENTITY_NAME = 'POSTS' AND ENTITY_ID = :OLD.POST_ID;
end;
/

-- ----------------------------
-- Primary Key structure for table PUBLICATIONS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."PUBLICATIONS" ADD CONSTRAINT "PUBLICATIONS_PK" PRIMARY KEY ("PUBLICATION_ID");

-- ----------------------------
-- Uniques structure for table PUBLICATIONS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."PUBLICATIONS" ADD CONSTRAINT "PUBLICATIONS_UNIQUE" UNIQUE ("USER_ID", "TITLE", "AUTHORS", "JOURNAL", "PUBLICATION_DATE") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table PUBLICATIONS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."PUBLICATIONS" ADD CONSTRAINT "SYS_C0023405" CHECK ("PUBLICATION_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."PUBLICATIONS" ADD CONSTRAINT "SYS_C0023406" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."PUBLICATIONS" ADD CONSTRAINT "SYS_C0023407" CHECK ("TITLE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."PUBLICATIONS" ADD CONSTRAINT "SYS_C0023408" CHECK ("AUTHORS" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."PUBLICATIONS" ADD CONSTRAINT "SYS_C0023409" CHECK ("JOURNAL" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."PUBLICATIONS" ADD CONSTRAINT "SYS_C0023410" CHECK ("PUBLICATION_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table RESEARCH_INTERESTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."RESEARCH_INTERESTS" ADD CONSTRAINT "RESEARCH_INTERESTS_PK" PRIMARY KEY ("RESEARCH_INTEREST_ID");

-- ----------------------------
-- Uniques structure for table RESEARCH_INTERESTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."RESEARCH_INTERESTS" ADD CONSTRAINT "RESEARCH_INTERESTS_UNIQUE" UNIQUE ("RESEARCH_INTEREST", "USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table RESEARCH_INTERESTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."RESEARCH_INTERESTS" ADD CONSTRAINT "SYS_C0023366" CHECK ("RESEARCH_INTEREST_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."RESEARCH_INTERESTS" ADD CONSTRAINT "SYS_C0023367" CHECK ("RESEARCH_INTEREST" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."RESEARCH_INTERESTS" ADD CONSTRAINT "SYS_C0023368" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table REUNIONS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."REUNIONS" ADD CONSTRAINT "REUNIONS_PK" PRIMARY KEY ("EVENT_ID");

-- ----------------------------
-- Checks structure for table REUNIONS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."REUNIONS" ADD CONSTRAINT "SYS_C0025414" CHECK ("EVENT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."REUNIONS" ADD CONSTRAINT "SYS_C0025415" CHECK ("EVENT_NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."REUNIONS" ADD CONSTRAINT "SYS_C0025416" CHECK ("EVENT_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."REUNIONS" ADD CONSTRAINT "SYS_C0025417" CHECK ("DESCRIPTION" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."REUNIONS" ADD CONSTRAINT "SYS_C0025418" CHECK ("FEES" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."REUNIONS" ADD CONSTRAINT "SYS_C0025419" CHECK ("GROUP_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."REUNIONS" ADD CONSTRAINT "SYS_C0025420" CHECK ("TIMESTAMP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."REUNIONS" ADD CONSTRAINT "SYS_C0025421" CHECK ( fees>=0 ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table REUNIONS
-- ----------------------------

CREATE TRIGGER "SKILLVERSE"."REUNION_NOTIFICATION" AFTER INSERT ON "SKILLVERSE"."REUNIONS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    G_GROUP_NAME VARCHAR2(1000);
BEGIN

    SELECT GROUP_NAME INTO G_GROUP_NAME
    FROM GROUPS
    WHERE GROUPS.GROUP_ID = :NEW.GROUP_ID;

    FOR GM IN (SELECT * FROM GROUP_MEMBERS WHERE GROUP_MEMBERS.GROUP_ID = :NEW.GROUP_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, GM.USER_ID , 'EVENTS', :NEW.EVENT_ID , G_GROUP_NAME ||' group is arranging a reunion',
            '/api/reunion/' || :NEW.EVENT_ID ,'NO');
    end loop;
end;
/


CREATE TRIGGER "SKILLVERSE"."REUNION_UPDATE_NOTIFICATION" AFTER UPDATE ON "SKILLVERSE"."REUNIONS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
BEGIN

    FOR EP IN (SELECT * FROM EVENT_PARTICIPANTS WHERE EVENT_ID = :NEW.EVENT_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, EP.USER_ID , 'EVENT_PARTICIPANTS', :NEW.EVENT_ID , :NEW.EVENT_NAME ||' event has updated',
            '/api/reunion/' || :NEW.EVENT_ID ,'NO');
    end loop;
end;
/

-- ----------------------------
-- Primary Key structure for table SCHEDULES
-- ----------------------------
ALTER TABLE "SKILLVERSE"."SCHEDULES" ADD CONSTRAINT "SCHEDULES_PK" PRIMARY KEY ("SCHEDULE_ID");

-- ----------------------------
-- Checks structure for table SCHEDULES
-- ----------------------------
ALTER TABLE "SKILLVERSE"."SCHEDULES" ADD CONSTRAINT "SYS_C0025395" CHECK ("SCHEDULE_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SCHEDULES" ADD CONSTRAINT "SYS_C0025396" CHECK ("EVENT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SCHEDULES" ADD CONSTRAINT "SYS_C0025397" CHECK ("START_TIME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SCHEDULES" ADD CONSTRAINT "SYS_C0025398" CHECK ("END_TIME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SCHEDULES" ADD CONSTRAINT "SYS_C0025399" CHECK ("DESCRIPTION" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table SCHEDULES
-- ----------------------------

CREATE TRIGGER "SKILLVERSE"."SCHEDULE_NOTIFICATION" AFTER INSERT OR UPDATE ON "SKILLVERSE"."SCHEDULES" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    E_EVENT_TYPE VARCHAR2(1000);
BEGIN

    SELECT EVENT_TYPE INTO E_EVENT_TYPE
    FROM EVENTS
    WHERE EVENTS.EVENT_ID = :NEW.EVENT_ID;

    FOR EP IN (SELECT * FROM EVENT_PARTICIPANTS WHERE EVENT_ID = :NEW.EVENT_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, EP.USER_ID , 'EVENT_PARTICIPANTS', :NEW.EVENT_ID , 'An event that you are going has updated',
            '/api/'|| E_EVENT_TYPE ||'/' || :NEW.EVENT_ID ,'NO');
    end loop;
end;
/

-- ----------------------------
-- Primary Key structure for table SEMINARS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."SEMINARS" ADD CONSTRAINT "SEMINARS_PK" PRIMARY KEY ("EVENT_ID");

-- ----------------------------
-- Checks structure for table SEMINARS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."SEMINARS" ADD CONSTRAINT "SYS_C0025425" CHECK ("EVENT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SEMINARS" ADD CONSTRAINT "SYS_C0025426" CHECK ("EVENT_NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SEMINARS" ADD CONSTRAINT "SYS_C0025427" CHECK ("EVENT_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SEMINARS" ADD CONSTRAINT "SYS_C0025428" CHECK ("DESCRIPTION" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SEMINARS" ADD CONSTRAINT "SYS_C0025429" CHECK ("FEES" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SEMINARS" ADD CONSTRAINT "SYS_C0025430" CHECK ("TOPIC" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SEMINARS" ADD CONSTRAINT "SYS_C0025431" CHECK ("AVAILABLE_FOR" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SEMINARS" ADD CONSTRAINT "SYS_C0025432" CHECK ("GROUP_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SEMINARS" ADD CONSTRAINT "SYS_C0025433" CHECK ("TIMESTAMP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SEMINARS" ADD CONSTRAINT "SYS_C0025434" CHECK ( fees>=0 ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table SEMINARS
-- ----------------------------

CREATE TRIGGER "SKILLVERSE"."SEMINAR_NOTIFICATION" AFTER INSERT ON "SKILLVERSE"."SEMINARS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    G_GROUP_NAME VARCHAR2(1000);
BEGIN

    SELECT GROUP_NAME INTO G_GROUP_NAME
    FROM GROUPS
    WHERE GROUPS.GROUP_ID = :NEW.GROUP_ID;

    FOR GM IN (SELECT * FROM GROUP_MEMBERS WHERE GROUP_MEMBERS.GROUP_ID = :NEW.GROUP_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, GM.USER_ID , 'EVENTS', :NEW.EVENT_ID , G_GROUP_NAME ||' group is arranging seminar',
            '/api/seminar/' || :NEW.EVENT_ID ,'NO');
    end loop;
end;
/



CREATE TRIGGER "SKILLVERSE"."SEMINAR_UPDATE_NOTIFICATION" AFTER UPDATE ON "SKILLVERSE"."SEMINARS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
BEGIN

    FOR EP IN (SELECT * FROM EVENT_PARTICIPANTS WHERE EVENT_ID = :NEW.EVENT_ID)
    LOOP
        INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
        VALUES (NOTIFICATION_SEQ.nextval, EP.USER_ID , 'EVENT_PARTICIPANTS', :NEW.EVENT_ID , :NEW.EVENT_NAME ||' event has updated',
            '/api/seminar/' || :NEW.EVENT_ID ,'NO');
    end loop;
end;
/

-- ----------------------------
-- Primary Key structure for table SKILLS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."SKILLS" ADD CONSTRAINT "SKILLS_PK" PRIMARY KEY ("SKILL_ID");

-- ----------------------------
-- Uniques structure for table SKILLS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."SKILLS" ADD CONSTRAINT "SKILLS_UNIQUE" UNIQUE ("SKILL", "USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table SKILLS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."SKILLS" ADD CONSTRAINT "SYS_C0023360" CHECK ("SKILL_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SKILLS" ADD CONSTRAINT "SYS_C0023361" CHECK ("SKILL" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SKILLS" ADD CONSTRAINT "SYS_C0023362" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table USERS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."USERS" ADD CONSTRAINT "USERS_PK" PRIMARY KEY ("USER_ID");

-- ----------------------------
-- Uniques structure for table USERS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."USERS" ADD CONSTRAINT "SYS_C0023359" UNIQUE ("EMAIL") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table USERS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."USERS" ADD CONSTRAINT "EMAIL_CHECK" CHECK ( email like '_%@__%.__%') NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."USERS" ADD CONSTRAINT "SYS_C0023345" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."USERS" ADD CONSTRAINT "SYS_C0023346" CHECK ("FIRST_NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."USERS" ADD CONSTRAINT "SYS_C0023347" CHECK ("LAST_NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."USERS" ADD CONSTRAINT "SYS_C0023348" CHECK ("DEPARTMENT" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."USERS" ADD CONSTRAINT "SYS_C0023349" CHECK ("BATCH" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."USERS" ADD CONSTRAINT "SYS_C0023350" CHECK ("GENDER" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."USERS" ADD CONSTRAINT "SYS_C0023351" CHECK ("CITY" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."USERS" ADD CONSTRAINT "SYS_C0023352" CHECK ("COUNTRY" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."USERS" ADD CONSTRAINT "SYS_C0023353" CHECK ("EMAIL" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."USERS" ADD CONSTRAINT "SYS_C0023354" CHECK ("PASSWORD" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."USERS" ADD CONSTRAINT "SYS_C0023355" CHECK ( department in
	                                        ('Chemical Engineering',
                                            'Materials and Metallurgical Engineering',
	                                        'Civil Engineering',
	                                        'Water Resources Engineering',
	                                        'Mechanical Engineering',
	                                        'Industrial and Production Engineering',
	                                        'Naval Architecture and Marine Engineering',
	                                        'Electrical and Electronic Engineering',
	                                        'Computer Science and Engineering',
	                                        'Biomedical Engineering',
	                                        'Architecture',
	                                        'Urban and Regional Planning'
	                                         ) ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."USERS" ADD CONSTRAINT "SYS_C0023356" CHECK ( gender in ('Male','Female','Others') ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table USERS
-- ----------------------------

CREATE TRIGGER "SKILLVERSE"."WELCOME_USER_NOTIFICATION" AFTER INSERT ON "SKILLVERSE"."USERS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
BEGIN
    INSERT INTO NOTIFICATION(notification_id, user_id, entity_name, entity_id, notification_text, notification_url, seen)
    VALUES (NOTIFICATION_SEQ.nextval, :NEW.USER_ID, 'USERS', :NEW.USER_ID, 'Welcome to SKILLVERSE. Click here to add info in your profile...', '/api/user/edit','NO');
end;
/

-- ----------------------------
-- Primary Key structure for table WORK_EXPERIENCE
-- ----------------------------
ALTER TABLE "SKILLVERSE"."WORK_EXPERIENCE" ADD CONSTRAINT "WORK_EXPERIENCE_PK" PRIMARY KEY ("WORK_EXPERIENCE_ID");

-- ----------------------------
-- Uniques structure for table WORK_EXPERIENCE
-- ----------------------------
ALTER TABLE "SKILLVERSE"."WORK_EXPERIENCE" ADD CONSTRAINT "WORK_EXPERIENCE_UNIQUE" UNIQUE ("USER_ID", "ORGANIZATION", "EMPLOYMENT_TYPE", "DESIGNATION", "START_DATE") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table WORK_EXPERIENCE
-- ----------------------------
ALTER TABLE "SKILLVERSE"."WORK_EXPERIENCE" ADD CONSTRAINT "SYS_C0023387" CHECK ("WORK_EXPERIENCE_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."WORK_EXPERIENCE" ADD CONSTRAINT "SYS_C0023388" CHECK ("USER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."WORK_EXPERIENCE" ADD CONSTRAINT "SYS_C0023389" CHECK ("ORGANIZATION" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."WORK_EXPERIENCE" ADD CONSTRAINT "SYS_C0023390" CHECK ("EMPLOYMENT_TYPE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."WORK_EXPERIENCE" ADD CONSTRAINT "SYS_C0023391" CHECK ("DESIGNATION" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."WORK_EXPERIENCE" ADD CONSTRAINT "SYS_C0023392" CHECK ("START_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."WORK_EXPERIENCE" ADD CONSTRAINT "SYS_C0023393" CHECK (  employment_type in ('Part-Time', 'Full-Time',
                                                        'Self-Employed','Internship',
                                                       'Freelance', 'Contract', 'Seasonal')) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."WORK_EXPERIENCE" ADD CONSTRAINT "WORK_EXPERIENCE_CHECK" CHECK ( start_date < end_date ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table ACHIEVEMENTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."ACHIEVEMENTS" ADD CONSTRAINT "ACHIEVEMENTS_FK" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table BLOGS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."BLOGS" ADD CONSTRAINT "BLOGS_FK1" FOREIGN KEY ("POST_ID") REFERENCES "SKILLVERSE"."POSTS" ("POST_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."BLOGS" ADD CONSTRAINT "BLOGS_FK2" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table COMMENTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."COMMENTS" ADD CONSTRAINT "COMMENTS_FK1" FOREIGN KEY ("POST_ID") REFERENCES "SKILLVERSE"."POSTS" ("POST_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."COMMENTS" ADD CONSTRAINT "COMMENTS_FK2" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table REPORTS


ALTER TABLE "SKILLVERSE"."REPORTS" ADD CONSTRAINT "REPORTS_FK1" FOREIGN KEY ("POST_ID") REFERENCES "SKILLVERSE"."POSTS" ("POST_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."REPORTS" ADD CONSTRAINT "REPORTS_FK2" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

------------------------------------------------
-- Foreign Keys structure for table CO_CURRICULARS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."CO_CURRICULARS" ADD CONSTRAINT "CO_CURRICULARS_FK1" FOREIGN KEY ("EVENT_ID") REFERENCES "SKILLVERSE"."EVENTS" ("EVENT_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."CO_CURRICULARS" ADD CONSTRAINT "CO_CURRICULARS_FK2" FOREIGN KEY ("GROUP_ID") REFERENCES "SKILLVERSE"."GROUPS" ("GROUP_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."CO_CURRICULARS" DROP CONSTRAINT "CO_CURRICULARS_FK2"

-- ----------------------------
-- Foreign Keys structure for table EDUCATION
-- ----------------------------
ALTER TABLE "SKILLVERSE"."EDUCATION" ADD CONSTRAINT "EDUCATION_FK" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table EVENT_PARTICIPANTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."EVENT_PARTICIPANTS" ADD CONSTRAINT "EVENT_PARTICIPANTS_FK1" FOREIGN KEY ("EVENT_ID") REFERENCES "SKILLVERSE"."EVENTS" ("EVENT_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."EVENT_PARTICIPANTS" ADD CONSTRAINT "EVENT_PARTICIPANTS_FK2" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table FOLLOWS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."FOLLOWS" ADD CONSTRAINT "FOLLOWS_FK1" FOREIGN KEY ("FOLLOWER") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."FOLLOWS" ADD CONSTRAINT "FOLLOWS_FK2" FOREIGN KEY ("FOLLOWING") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table GROUPS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."GROUPS" ADD CONSTRAINT "GROUPS_FK" FOREIGN KEY ("ADMIN_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table GROUP_MEMBERS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."GROUP_MEMBERS" ADD CONSTRAINT "GROUP_MEMBERS_FK1" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."GROUP_MEMBERS" ADD CONSTRAINT "GROUP_MEMBERS_FK2" FOREIGN KEY ("GROUP_ID") REFERENCES "SKILLVERSE"."GROUPS" ("GROUP_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table GROUP_POSTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."GROUP_POSTS" ADD CONSTRAINT "GROUP_POSTS_FK1" FOREIGN KEY ("POST_ID") REFERENCES "SKILLVERSE"."POSTS" ("POST_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."GROUP_POSTS" ADD CONSTRAINT "GROUP_POSTS_FK2" FOREIGN KEY ("GROUP_MEMBER_ID") REFERENCES "SKILLVERSE"."GROUP_MEMBERS" ("GROUP_MEMBER_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table INTERESTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."INTERESTS" ADD CONSTRAINT "INTERESTS_FK" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table JOB_APPLICATION
-- ----------------------------
ALTER TABLE "SKILLVERSE"."JOB_APPLICATION" ADD CONSTRAINT "JOB_APPLICATION_FK1" FOREIGN KEY ("POST_ID") REFERENCES "SKILLVERSE"."POSTS" ("POST_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_APPLICATION" ADD CONSTRAINT "JOB_APPLICATION_FK2" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table JOB_POSTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "JOB_POSTS_FK1" FOREIGN KEY ("POST_ID") REFERENCES "SKILLVERSE"."POSTS" ("POST_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."JOB_POSTS" ADD CONSTRAINT "JOB_POSTS_FK2" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table LIKES
-- ----------------------------
ALTER TABLE "SKILLVERSE"."LIKES" ADD CONSTRAINT "LIKES_FK1" FOREIGN KEY ("POST_ID") REFERENCES "SKILLVERSE"."POSTS" ("POST_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."LIKES" ADD CONSTRAINT "LIKES_FK2" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table MERCHS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."MERCHS" ADD CONSTRAINT "MERCHS_FK1" FOREIGN KEY ("POST_ID") REFERENCES "SKILLVERSE"."POSTS" ("POST_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."MERCHS" ADD CONSTRAINT "MERCHS_FK2" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table NOTIFICATION
-- ----------------------------
ALTER TABLE "SKILLVERSE"."NOTIFICATION" ADD CONSTRAINT "NOTIFICATION_FK" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PENDING_MEMBERS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."PENDING_MEMBERS" ADD CONSTRAINT "PENDING_MEMBERS_FK1" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."PENDING_MEMBERS" ADD CONSTRAINT "PENDING_MEMBERS_FK2" FOREIGN KEY ("GROUP_ID") REFERENCES "SKILLVERSE"."GROUPS" ("GROUP_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PUBLICATIONS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."PUBLICATIONS" ADD CONSTRAINT "PUBLICATIONS_FK" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table RESEARCH_INTERESTS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."RESEARCH_INTERESTS" ADD CONSTRAINT "RESEARCH_INTERESTS_FK" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table REUNIONS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."REUNIONS" ADD CONSTRAINT "REUNIONS_FK1" FOREIGN KEY ("EVENT_ID") REFERENCES "SKILLVERSE"."EVENTS" ("EVENT_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."REUNIONS" ADD CONSTRAINT "REUNIONS_FK2" FOREIGN KEY ("GROUP_ID") REFERENCES "SKILLVERSE"."GROUPS" ("GROUP_ID")ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
--ALTER TABLE "SKILLVERSE"."REUNIONS" DROP CONSTRAINT "REUNIONS_FK2" 

-- ----------------------------
-- Foreign Keys structure for table SCHEDULES
-- ----------------------------
ALTER TABLE "SKILLVERSE"."SCHEDULES" ADD CONSTRAINT "SCHEDULES_FK" FOREIGN KEY ("EVENT_ID") REFERENCES "SKILLVERSE"."EVENTS" ("EVENT_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table SEMINARS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."SEMINARS" ADD CONSTRAINT "SEMINARS_FK1" FOREIGN KEY ("EVENT_ID") REFERENCES "SKILLVERSE"."EVENTS" ("EVENT_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "SKILLVERSE"."SEMINARS" ADD CONSTRAINT "SEMINARS_FK2" FOREIGN KEY ("GROUP_ID") REFERENCES "SKILLVERSE"."GROUPS" ("GROUP_ID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;


-- ----------------------------
-- Foreign Keys structure for table SKILLS
-- ----------------------------
ALTER TABLE "SKILLVERSE"."SKILLS" ADD CONSTRAINT "SKILLS_FK" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table WORK_EXPERIENCE
-- ----------------------------
ALTER TABLE "SKILLVERSE"."WORK_EXPERIENCE" ADD CONSTRAINT "WORK_EXPERIENCE_FK" FOREIGN KEY ("USER_ID") REFERENCES "SKILLVERSE"."USERS" ("USER_ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

 
